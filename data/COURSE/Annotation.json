function populate_tweets_ENG(){
var annotation_data =

//{ Start\

{"0":{"tweet_id":1,"author":"yhee0047","tweet_date":"03\/01\/2019 13:35","text":"asdasda","topicid":"1_1","location":1,"type":"important","sect_Title":" ENG1003 unit introduction   ","comment":" limited, b","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/36123\/"},"1":{"tweet_id":2,"author":"yhee0047","tweet_date":"03\/01\/2019 13:35","text":"asdasda","topicid":"1_1","location":1,"type":"important","sect_Title":" ENG1003 unit introduction   ","comment":" limited, b","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/36123\/"},"2":{"tweet_id":3,"author":"yhee0047","tweet_date":"03\/01\/2019 13:35","text":"","topicid":"1_1","location":1,"type":"important","sect_Title":" ENG1003 unit introduction   ","comment":"ee","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/36123\/"},"3":{"tweet_id":4,"author":"yhee0047","tweet_date":"03\/02\/2019 01:44","text":"","topicid":"1_1","location":4,"type":"important","sect_Title":" ENG1003 unit introduction   ","comment":"You will be assessed on the preparatory online quizzes, practical lab work, two team-based app programming projects, and the final exam (see the following table for details).","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/36123\/"},"4":{"tweet_id":5,"author":"yhee0047","tweet_date":"03\/02\/2019 01:46","text":"","topicid":"1_1","location":4,"type":"important","sect_Title":" ENG1003 unit introduction   ","comment":"Assessment\nValue\nNotes\n\n\n\n\nPre-workshop quizzes\n12%\nWeekly, before delivery of the first workshop each week.\n\n\nPractical class work\n12%\nThe end of each practical class, reassessed within two weeks.\n\n\nAssignment 1\n12%\nDue end of week 5. Presentation during week 6 practical class.\n\n\nAssignment 2\n24%\nDue end of week 11. Presentation during week 12 practical class.\n\n\nExamination\n40%\nClosed book. 2 hours, with 30 minutes reading and noting time.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/36123\/"},"5":{"tweet_id":6,"author":"yhee0047","tweet_date":"03\/02\/2019 01:46","text":"","topicid":"1_1","location":4,"type":"important","sect_Title":" ENG1003 unit introduction   ","comment":"You will be assessed on the preparatory online quizzes, practical lab work, two team-based app programming projects, and the final exam (see the following table for details).","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/36123\/"},"6":{"tweet_id":7,"author":"yhee0047","tweet_date":"03\/02\/2019 01:55","text":"CSS = Cascading Style Sheets [Styles to Page content]\r* Colour\r* Heading Styles\r* Composition of the content\r\r\rHTML = HyperText Markup Language [Content and Structure]\r* Paragraphs\r* Text\r* Lists\r* Images\r\rClient Side Scripting Language [e.g. Java Script]","topicid":"1_2","location":1,"type":"comment","sect_Title":" Web application components   ","comment":"","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86842\/"},"7":{"tweet_id":8,"author":"yhee0047","tweet_date":"03\/02\/2019 01:55","text":"CSS = Cascading Style Sheets [Styles to Page content]\r* Colour\r* Heading Styles\r* Composition of the content\r\r\rHTML = HyperText Markup Language [Content and Structure]\r* Paragraphs\r* Text\r* Lists\r* Images\r\rClient Side Scripting Language [e.g. Java Script]","topicid":"1_2","location":1,"type":"comment","sect_Title":" Web application components   ","comment":"","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86842\/"},"8":{"tweet_id":9,"author":"yhee0047","tweet_date":"03\/02\/2019 01:57","text":"","topicid":"1_2","location":1,"type":"important","sect_Title":" Web application components   ","comment":"The browser uses the HTML and additional resources to construct an in-memory representation of the page, known as a Document Object Model (DOM) instance.  This DOM instance holds information about the layout and style of everything on the web page, which is then used to render (display) the page for the user.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86842\/"},"9":{"tweet_id":10,"author":"yhee0047","tweet_date":"03\/02\/2019 02:14","text":"","topicid":"1_2","location":2,"type":"important","sect_Title":" Web application components   ","comment":"<div> elements which are commonly used to divide up a page into its major parts, e.g., a header, footer, sidebar, menu, content, etc. A consistent inherited style can then be given to the child elements of each div.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86842\/"},"10":{"tweet_id":11,"author":"yhee0047","tweet_date":"03\/02\/2019 02:22","text":"**How Web Apps Work**\r\r**Web Application**  = one or more related web pages that allow a person to perform a task\r\r**Mobile Web App **= a web application that runs in a browser on a mobile device\r\rHTTP = HyperText Transfer Protocol =  The language used by browsers and web servers\r\rRequests from browsers sends HTTP request. When the HTTP response is received, it allows the browser to build up a DOM (memory model of a page). It will then subsequently keep sending HTTP requests if the page requires styling, scripts and media files. The browser doesn't display this until the DOM has been completed and no more requests are required.","topicid":"1_2","location":1,"type":"comment","sect_Title":" Web application components   ","comment":"","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86842\/"},"11":{"tweet_id":12,"author":"yhee0047","tweet_date":"03\/02\/2019 02:22","text":"**How Web Apps Work**\r\r**Web Application**  = one or more related web pages that allow a person to perform a task\r\r**Mobile Web App **= a web application that runs in a browser on a mobile device\r\rHTTP = HyperText Transfer Protocol =  The language used by browsers and web servers\r\rRequests from browsers sends HTTP request. When the HTTP response is received, it allows the browser to build up a DOM (memory model of a page). It will then subsequently keep sending HTTP requests if the page requires styling, scripts and media files. The browser doesn't display this until the DOM has been completed and no more requests are required.","topicid":"1_2","location":1,"type":"comment","sect_Title":" Web application components   ","comment":"","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86842\/"},"12":{"tweet_id":13,"author":"vved0001","tweet_date":"03\/03\/2019 04:18","text":"","topicid":"1_2","location":1,"type":"interesting","sect_Title":" Web application components   ","comment":"The","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86842\/"},"13":{"tweet_id":14,"author":"vved0001","tweet_date":"03\/03\/2019 04:21","text":"","topicid":"1_2","location":1,"type":"interesting","sect_Title":" Web application components   ","comment":"quest to another c","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86842\/"},"14":{"tweet_id":15,"author":"jhar0038","tweet_date":"03\/04\/2019 01:43","text":"","topicid":"1_1","location":1,"type":"important","sect_Title":" ENG1003 unit introduction   ","comment":"range of topics, me","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/36123\/"},"15":{"tweet_id":16,"author":"tgal0009","tweet_date":"03\/04\/2019 01:44","text":"\/","topicid":"1_2","location":2,"type":"comment","sect_Title":" Web application components   ","comment":"<p>","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86842\/"},"16":{"tweet_id":17,"author":"dngu0026","tweet_date":"03\/04\/2019 07:26","text":"","topicid":"1_2","location":3,"type":"important","sect_Title":" Web application components   ","comment":".legalText is the selector","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86842\/"},"17":{"tweet_id":18,"author":"acoo0017","tweet_date":"03\/05\/2019 05:22","text":"When I click file in Atom and attempt to open the Simple folder, I can't find it. How can I find this folder?","topicid":"14_2","location":4,"type":"help","sect_Title":" Prac 1 instructions   ","comment":"Open the \u201cAtom\u201d application and select File > Open. Choose the prac01\/simple folder.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86838\/"},"18":{"tweet_id":19,"author":"mcpia1","tweet_date":"03\/06\/2019 01:15","text":"","topicid":"1_2","location":1,"type":"important","sect_Title":" Web application components   ","comment":"in-memory representation of the page, known as a Document Object Model (DOM) instance.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86842\/"},"19":{"tweet_id":20,"author":"mtra0025","tweet_date":"03\/07\/2019 06:42","text":"","topicid":"2_2","location":1,"type":"confusing","sect_Title":" JavaScript 2:00 Data Types and Operations","comment":"This would be useless if we could not check if a variable currently contained the null value so this is also possible (see later when we deal with conditions).","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/88560\/"},"20":{"tweet_id":21,"author":"nami0004","tweet_date":"03\/07\/2019 22:31","text":"","topicid":"14_2","location":3,"type":"important","sect_Title":" Prac 1 instructions   ","comment":"listens to both sides of the argument","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86838\/"},"21":{"tweet_id":22,"author":"nami0004","tweet_date":"03\/07\/2019 22:32","text":"","topicid":"14_2","location":3,"type":"important","sect_Title":" Prac 1 instructions   ","comment":"agree with Kalani about splitting the port","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86838\/"},"22":{"tweet_id":23,"author":"nami0004","tweet_date":"03\/07\/2019 22:32","text":"","topicid":"14_2","location":3,"type":"important","sect_Title":" Prac 1 instructions   ","comment":"efficient, and quick","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86838\/"},"23":{"tweet_id":24,"author":"nami0004","tweet_date":"03\/07\/2019 22:32","text":"","topicid":"14_2","location":3,"type":"important","sect_Title":" Prac 1 instructions   ","comment":" tacitly agrees ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86838\/"},"24":{"tweet_id":25,"author":"nami0004","tweet_date":"03\/07\/2019 22:32","text":"","topicid":"14_2","location":3,"type":"important","sect_Title":" Prac 1 instructions   ","comment":"acquired expert knowledge on Human-Computer Interactions (HCI)","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86838\/"},"25":{"tweet_id":26,"author":"nami0004","tweet_date":"03\/07\/2019 22:40","text":"","topicid":"14_2","location":3,"type":"important","sect_Title":" Prac 1 instructions   ","comment":"picks up on mistakes","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86838\/"},"26":{"tweet_id":27,"author":"nami0004","tweet_date":"03\/07\/2019 22:41","text":"","topicid":"14_2","location":3,"type":"important","sect_Title":" Prac 1 instructions   ","comment":"whole team congratulates him and privately agree the project would have merely \u2018ticked the boxes\u2019 (if not failed) without him","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86838\/"},"27":{"tweet_id":28,"author":"nami0004","tweet_date":"03\/07\/2019 22:41","text":"","topicid":"14_2","location":3,"type":"important","sect_Title":" Prac 1 instructions   ","comment":"asks him to just draft a few sections and let Natalie take over the res","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86838\/"},"28":{"tweet_id":29,"author":"nami0004","tweet_date":"03\/07\/2019 22:41","text":"","topicid":"14_2","location":3,"type":"important","sect_Title":" Prac 1 instructions   ","comment":"agrees but continues to work on Natalie\u2019s parts","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86838\/"},"29":{"tweet_id":30,"author":"nami0004","tweet_date":"03\/07\/2019 22:41","text":"","topicid":"14_2","location":3,"type":"important","sect_Title":" Prac 1 instructions   ","comment":"double-checking her work","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86838\/"},"30":{"tweet_id":31,"author":"nami0004","tweet_date":"03\/07\/2019 22:41","text":"","topicid":"14_2","location":3,"type":"important","sect_Title":" Prac 1 instructions   ","comment":" re-doing it whenever he finds a flaw.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86838\/"},"31":{"tweet_id":32,"author":"nami0004","tweet_date":"03\/07\/2019 22:42","text":"","topicid":"14_2","location":3,"type":"important","sect_Title":" Prac 1 instructions   ","comment":"spent about thirty hours this week reading and rereading this report looking for typos, inconsistencies or spelling or grammatical errors which would look unprofessional and embarrass the team in front of the client.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86838\/"},"32":{"tweet_id":33,"author":"nami0004","tweet_date":"03\/07\/2019 22:42","text":"","topicid":"14_2","location":3,"type":"important","sect_Title":" Prac 1 instructions   ","comment":" carefully reviewing the final report","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86838\/"},"33":{"tweet_id":34,"author":"dami0002","tweet_date":"03\/08\/2019 02:11","text":"","topicid":"1_2","location":4,"type":"important","sect_Title":" Web application components   ","comment":"have","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86842\/"},"34":{"tweet_id":35,"author":"nsha0030","tweet_date":"03\/09\/2019 19:21","text":"","topicid":"2_2","location":2,"type":"confusing","sect_Title":" JavaScript 2:00 Data Types and Operations","comment":"\/\/ Surname. The string starting from one character past the\/\/ location of the ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/88560\/"},"35":{"tweet_id":36,"author":"aabd0029","tweet_date":"03\/10\/2019 09:22","text":"","topicid":"2_2","location":2,"type":"confusing","sect_Title":" JavaScript 2:00 Data Types and Operations","comment":"let output = null;","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/88560\/"},"36":{"tweet_id":37,"author":"sjie0001","tweet_date":"03\/10\/2019 10:14","text":"","topicid":"2_2","location":2,"type":"confusing","sect_Title":" JavaScript 2:00 Data Types and Operations","comment":"\/\/ floor returns its parameter with any fractional part chopped off","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/88560\/"},"37":{"tweet_id":38,"author":"lkwa0002","tweet_date":"03\/10\/2019 10:39","text":"","topicid":"2_2","location":4,"type":"confusing","sect_Title":" JavaScript 2:00 Data Types and Operations","comment":"people[people.length] = \"Amy\";","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/88560\/"},"38":{"tweet_id":39,"author":"dhow0004","tweet_date":"03\/10\/2019 19:29","text":"","topicid":"2_1","location":3,"type":"important","sect_Title":" JavaScript 1:00 Variables   ","comment":"Aside: Object Oriented (OO) programming\nThis syntax pattern (a.b(c)) will appear again and again in the JavaScript we write. It\u2019s the basic way of getting things done in Object Oriented (OO) programming.\nWe ask an object (e.g., console) to perform some task it knows how to do by invoking (applying, calling) one of its methods (e.g., log()) on it. Often the method will require data to perform its task (e.g. what to display) which is passed as one or more parameters in the parentheses immediately following the method\u2019s name (e.g., fullName). \nIt is also possible for such a method to calculate and return a value, and therefore be able be used in or as an expression itself.  (console.log() doesn\u2019t return a value.) \nFor now, just try to recognise this syntax (arrangement of words and symbols the JavaScript run-time system can understand) pattern when it crops up. Later we will understand more about the syntax and semantics of this syntax pattern.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86780\/"},"39":{"tweet_id":40,"author":"dhow0004","tweet_date":"03\/10\/2019 19:30","text":"","topicid":"2_1","location":4,"type":"important","sect_Title":" JavaScript 1:00 Variables   ","comment":"A second example to check understanding\n","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86780\/"},"40":{"tweet_id":41,"author":"dhow0004","tweet_date":"03\/10\/2019 19:33","text":"","topicid":"2_2","location":1,"type":"important","sect_Title":" JavaScript 2:00 Data Types and Operations","comment":"Also notice a JavaScript variable may hold values of different data types at different times during the execution of code (e.g., myNumber holding a String). This is a very bad idea and leads to all kinds of complicated and tricky to resolve errors. Don\u2019t do it","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/88560\/"},"41":{"tweet_id":42,"author":"dhow0004","tweet_date":"03\/10\/2019 19:37","text":"","topicid":"2_2","location":1,"type":"important","sect_Title":" JavaScript 2:00 Data Types and Operations","comment":"Beware: Never use the == equality operator or the != inequality operator. These operators allow comparison between data values of different types which can give unexpected results and is considered very poor coding style. Always use the === equality operator and the !== inequality operator instead.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/88560\/"},"42":{"tweet_id":43,"author":"dhow0004","tweet_date":"03\/10\/2019 19:38","text":"","topicid":"2_2","location":1,"type":"interesting","sect_Title":" JavaScript 2:00 Data Types and Operations","comment":"If you are unfamiliar with the logical operators their truth tables are:\n","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/88560\/"},"43":{"tweet_id":44,"author":"dhow0004","tweet_date":"03\/10\/2019 19:57","text":"","topicid":"2_2","location":3,"type":"confusing","sect_Title":" JavaScript 2:00 Data Types and Operations","comment":"There is another situation where the square brackets syntax is required, this time without the quotes. It\u2019s when the property name is a variable (e.g., daniella[aProperty]). We will see an example of this next week when we process the properties of an object using a loop execution control structure.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/88560\/"},"44":{"tweet_id":45,"author":"dhow0004","tweet_date":"03\/10\/2019 19:58","text":"","topicid":"2_2","location":3,"type":"interesting","sect_Title":" JavaScript 2:00 Data Types and Operations","comment":"JavaScript has a way of making objects with the same, consistent set of properties.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/88560\/"},"45":{"tweet_id":46,"author":"dhow0004","tweet_date":"03\/10\/2019 20:07","text":"","topicid":"2_2","location":4,"type":"confusing","sect_Title":" JavaScript 2:00 Data Types and Operations","comment":"In the Mozilla documentation you will find a lot of references to Array.prototype rather than Array. This is important but, just ignore the word prototype for now.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/88560\/"},"46":{"tweet_id":47,"author":"dhow0004","tweet_date":"03\/10\/2019 20:07","text":"","topicid":"2_2","location":4,"type":"important","sect_Title":" JavaScript 2:00 Data Types and Operations","comment":"The following points are important:\n\nRead the comments in the code (also note how having too many comments make code hard to read and understand)\nArrays are declared and initialised more often using the syntactic sugar in line 4 than the more standard syntax in line 2\nThe property names of Array objects (which are sequential integers) are referred to as array indexes, e.g., line 24 index = 7\nIndexes begin at 0\nname[2] is called an element of the names array\nconsole.log knows how to write out arrays as a comma separated list of elements, e.g., line 5\nArrays expand and contract automatically\nWhen you expand an array such that one or more elements have not been assigned values their\u00a0value is just the undefined value","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/88560\/"},"47":{"tweet_id":48,"author":"dhow0004","tweet_date":"03\/10\/2019 20:52","text":"","topicid":"2_3","location":3,"type":"confusing","sect_Title":" Debugging JavaScript    ","comment":"2.3SYLLABUSENG1003: Engineering Mobile AppsDebugging JavaScriptMichael WybrowUpdated 16 January 2018What is debugging?\nDebugging is the process of systematically removing errors (bugs) from the logic and code of a program. The process of debugging generally involves having a mental model or understanding of the intended correct behaviour of the running program and then verifying where the actual behaviour of the program diverges from this intended behaviour. Usually it is impossible to internalise the entire program for all but the simplest code. Thus, debugging will often involve first determining the section of the code where the bug lies and then focusing directly on that.\nDiagnostic log messages\nOne very simple and effective way of debugging is to add diagnostic log messages throughout your code and then look at these in the console log to determine if the program followed the path you expected during execution and various variables contained the values you expected.\nAn example diagnostic statement might be:\n1console.log(\"In computeValues(): runningTally is \" + runningTally);\nThe downside to this approach is having to repeatedly modify and rerun the code while searching for the problem and then cleaning up the diagnostic log statements when the bug has been fixed.\nDebugging in Chrome\nThe Chrome desktop browser has a Developer Tools window with a JavaScript debugger built into it. There is a detailed tutorial on using its features on this page. In this module we will walk through some of the relevant features for your app development work.\n\n\nCode inspection\nThe JavaScript debugger built into the Chrome Developer Tools.\nThe Developer Tools window in Chrome (also known as the Web Inspector) can be used for the same purposes as console log messages but without the need to constantly modify the code. To use it, open the web page you would like to debug, then open the Developer Tools by right-clicking on the page in Chrome and choosing \u201cInspect Element\u201d, or by clicking the icon in the top-right of the Chrome browser window and selecting \u201cMore tools\u201d then \u201cDeveloper Tools\u201d. You will see the Developer Tools window open.  This window can be docked at the side or bottom of the browser window or can be opened in a separate window.  Select the \u201cSources\u201d tab at the top of this window to switch to the JavaScript debugger. On the left hand side you will see a listing of the files that make up the current web app.  You can select these to view different JavaScript files used by the web page.  In the centre pane you will see a listing with the code of the page.   There are also several auxiliary information panes and controls.\nBreakpoints\nA line of code with a breakpoint set on it.\nYou can click on the beginning of a line of code and set a breakpoint. A breakpoint will cause the program execution to pause at that statement and drop you into the debugger. Typically this would be to stop execution at the beginning of a suspect region of code and look at what happens there.\nThe current values of local and global variables.\nThe first thing you will notice is that the values of any variables in scope are listed down the right hand side. These are updated whenever you hit a breakpoint or move to another statement.\nStepping through code\nButtons for controlling code execution.  From left to right: Continue script execution, Step over, Step into, Step out, Deactivate breakpoints, and Pause on exceptions.\nThe debugger gives you several options for stepping through code. Once you have hit a breakpoint you can either\n\nContinue: code will execute until a breakpoint (same or another) is hit;\nStep over (next): execute the current statement and pause again.\n\nThe Deactivate breakpoints option allows all breakpoints to be ignored without needing to explicitly remove each one.  We won\u2019t cover the other navigation controls for now, but will revise them later in the unit.\nNote that during the debugging process you are actually executing the code of the program, so you can only pause or move forward. Going back requires you to load the page (restart the code) and set a breakpoint to stop at an earlier point in the code. There are some languages and debuggers that capture the entire history of the program execution and can give you ability to move back and forward through execution, but JavaScript is not among these.\n\nAside: Debugging \u201cfunctions\u201d\nWe will cover the topic of functions in Week 4.  Since functions cause code to execute in a non-sequential order, the Chrome Developer Tools provide additional controls and panes to help debug code with functions.  Explanation of these is included here for completeness, but the function-related parts of the interface won\u2019t make sense until we have covered the topic of functions.\nThe debugger provides several commands for stepping through code containing functions. Once you have hit a breakpoint you can either\n\nContinue: code will execute until a breakpoint (same or another) is hit;\nStep over (next): execute the current statement and pause again. If the current statement is a function or method call then that function\/method will be fully executed and the debugger will pause after the function\/method returns. If it encounters a breakpoint during execution of the function\/method then the debugger will pause there.\nStep into: execute the current statement and pause again. In the case the current statement is a function or method call the debugger will return control to you at the beginning of that method\/function; or\nStep out: execute the rest of the current function and pause when execution is returned to the calling code.\n\nCall stack\nA call stack showing at the top the current function we are stopped in, and below that the chain of recursive function calls that lead here.\nAnother pane displayed\u00a0to\u00a0the right of the code contains a call stack (also known as a \u201cstack trace\u201d). This gives you the current history of function\/method calls that led to the current statement. We\u2019ve heard mention of functions and methods but they haven\u2019t been explained yet.  Suffice it to say, they cause the JavaScript run-time system to jump around to different positions in the code, rather than just executing statements sequentially.\nThe topmost entry in the call stack will be the function where the current statement is located. The one below will be the function that called this function along with the line number of the line of code where the call was made. Looking at this provides an easy way to tell how we reached the current point in the code. This can be very useful when you hit a breakpoint unexpectedly and are not sure how the program arrived at this line of code.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/38971\/"},"48":{"tweet_id":49,"author":"dhow0004","tweet_date":"03\/10\/2019 20:53","text":"","topicid":"2_3","location":3,"type":"confusing","sect_Title":" Debugging JavaScript    ","comment":"The debugger provides several commands for stepping through code containing functions. Once you have hit a breakpoint you can either\n\nContinue: code will execute until a breakpoint (same or another) is hit;\nStep over (next): execute the current statement and pause again. If the current statement is a function or method call then that function\/method will be fully executed and the debugger will pause after the function\/method returns. If it encounters a breakpoint during execution of the function\/method then the debugger will pause there.\nStep into: execute the current statement and pause again. In the case the current statement is a function or method call the debugger will return control to you at the beginning of that method\/function; or\nStep out: execute the rest of the current function and pause when execution is returned to the calling code.\n\nCall stack\nA call stack showing at the top the current function we are stopped in, and below that the chain of recursive function calls that lead here.\nAnother pane displayed\u00a0to\u00a0the right of the code contains a call stack (also known as a \u201cstack trace\u201d). This gives you the current history of function\/method calls that led to the current statement. We\u2019ve heard mention of functions and methods but they haven\u2019t been explained yet.  Suffice it to say, they cause the JavaScript run-time system to jump around to different positions in the code, rather than just executing statements sequentially.\nThe topmost entry in the call stack will be the function where the current statement is located. The one below will be the function that called this function along with the line number of the line of code where the call was made. Looking at this provides an easy way to tell how we reached the current point in the code. This can be very useful when you hit a breakpoint unexpectedly and are not sure how the program arrived at this line of code.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/38971\/"},"49":{"tweet_id":50,"author":"jelop2","tweet_date":"03\/10\/2019 23:10","text":"can we just do....\rlet outMessage \rinstead?\rwhats the reason for making the outMessage a string?","topicid":"2_2","location":1,"type":"help","sect_Title":" JavaScript 2:00 Data Types and Operations","comment":"let outMessage = \"\"","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/88560\/"},"50":{"tweet_id":51,"author":"ssur0009","tweet_date":"03\/11\/2019 01:00","text":"Math.floor() rounds anything inside in it down to the nearest integer which is why the fractional part disappears\reg. Math.floor(12\/10) \/\/ rounds down 1.2 to 1","topicid":"2_2","location":2,"type":"confusing","sect_Title":" JavaScript 2:00 Data Types and Operations","comment":"","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/88560\/"},"51":{"tweet_id":52,"author":"khir0008","tweet_date":"03\/11\/2019 03:06","text":"","topicid":"2_1","location":2,"type":"important","sect_Title":" JavaScript 1:00 Variables   ","comment":"A variable is a way for a program to temporarily store a piece of information and subsequently refer it it by a name","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86780\/"},"52":{"tweet_id":53,"author":"khir0008","tweet_date":"03\/11\/2019 03:07","text":"","topicid":"2_1","location":2,"type":"important","sect_Title":" JavaScript 1:00 Variables   ","comment":"In line 2 the keyword let is used to indicate that a variable is to be declared.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86780\/"},"53":{"tweet_id":54,"author":"khir0008","tweet_date":"03\/11\/2019 03:15","text":"","topicid":"2_1","location":3,"type":"important","sect_Title":" JavaScript 1:00 Variables   ","comment":"It\u2019s worth noting that when a value is assigned to a variable, any value currently contained in the variable is overwritten and lost forever","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86780\/"},"54":{"tweet_id":55,"author":"khir0008","tweet_date":"03\/11\/2019 03:19","text":"","topicid":"2_1","location":3,"type":"important","sect_Title":" JavaScript 1:00 Variables   ","comment":"When the + operator finds its operands are Strings it performs an operation called concatenation which means it joins the end of its LH operand to the start of its RH operand to make one new, longer String value. In this case the new String value is stored into the variable fullName.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86780\/"},"55":{"tweet_id":56,"author":"khir0008","tweet_date":"03\/11\/2019 03:42","text":"","topicid":"2_2","location":1,"type":"important","sect_Title":" JavaScript 2:00 Data Types and Operations","comment":"Notice JavaScript has a typeof operator. This operator and its operand form an expression that\u00a0evaluates\u00a0to the type of the operand. Another common way to\u00a0express this is to say the typeof operator returns the data type of its operand","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/88560\/"},"56":{"tweet_id":57,"author":"khir0008","tweet_date":"03\/11\/2019 03:49","text":"","topicid":"2_2","location":1,"type":"important","sect_Title":" JavaScript 2:00 Data Types and Operations","comment":"means you\u2019ve tried to use something that doesn\u2019t currently exist or doesn\u2019t currently have a value","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/88560\/"},"57":{"tweet_id":58,"author":"dgal0009","tweet_date":"03\/11\/2019 06:45","text":"","topicid":"2_1","location":3,"type":"interesting","sect_Title":" JavaScript 1:00 Variables   ","comment":"\nIt\u2019s worth noting that when a value is assigned to a variable, any value currently contained in the variable is overwritten and lost forever. What value do you think was in lastName before the assignment? How can you find out?\nMore assignments","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86780\/"},"58":{"tweet_id":59,"author":"kbou0004","tweet_date":"03\/16\/2019 09:20","text":"","topicid":"3_2","location":1,"type":"interesting","sect_Title":" JavaScript 3:00 Execution Control Structures ","comment":"Decision control structures (if-then-else)","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86782\/"},"59":{"tweet_id":60,"author":"kbou0004","tweet_date":"03\/16\/2019 09:32","text":"","topicid":"3_2","location":3,"type":"confusing","sect_Title":" JavaScript 3:00 Execution Control Structures ","comment":"Counter-controlled loops (using while loops)","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86782\/"},"60":{"tweet_id":61,"author":"kbou0004","tweet_date":"03\/16\/2019 09:36","text":"","topicid":"3_2","location":3,"type":"confusing","sect_Title":" JavaScript 3:00 Execution Control Structures ","comment":"let outputAreaRef = document.getElementById(\"outputArea\");let inString = \"Testing 1, 2, 3.\", output = \"\";\u00a0let i = 0;while (i < inString.length) \/\/ Same as i <= inString.length - 1{ \u00a0\u00a0\u00a0\u00a0output += inString.substr(i, 1) + \"<br \/>\";\u00a0\u00a0\u00a0\u00a0\u00a0i++;}\u00a0\u00a0 \u00a0outputAreaRef.innerHTML = output;","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86782\/"},"61":{"tweet_id":62,"author":"kbou0004","tweet_date":"03\/16\/2019 09:38","text":"","topicid":"3_2","location":3,"type":"confusing","sect_Title":" JavaScript 3:00 Execution Control Structures ","comment":"Counter-controlled loops (using for loops)","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86782\/"},"62":{"tweet_id":63,"author":"kbou0004","tweet_date":"03\/16\/2019 09:42","text":"","topicid":"3_2","location":3,"type":"confusing","sect_Title":" JavaScript 3:00 Execution Control Structures ","comment":"Using for loops to process arrays","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86782\/"},"63":{"tweet_id":64,"author":"kbou0004","tweet_date":"03\/16\/2019 09:45","text":"","topicid":"3_2","location":3,"type":"confusing","sect_Title":" JavaScript 3:00 Execution Control Structures ","comment":"Sentinel-controlled loops\n","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86782\/"},"64":{"tweet_id":65,"author":"kbou0004","tweet_date":"03\/16\/2019 09:49","text":"","topicid":"3_2","location":4,"type":"confusing","sect_Title":" JavaScript 3:00 Execution Control Structures ","comment":"Nesting control structures","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86782\/"},"65":{"tweet_id":66,"author":"kbou0004","tweet_date":"03\/16\/2019 10:22","text":"","topicid":"3_2","location":4,"type":"confusing","sect_Title":" JavaScript 3:00 Execution Control Structures ","comment":"Processing an Object\u2019s properties","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86782\/"},"66":{"tweet_id":67,"author":"lkwa0002","tweet_date":"03\/16\/2019 21:30","text":"","topicid":"3_2","location":3,"type":"confusing","sect_Title":" JavaScript 3:00 Execution Control Structures ","comment":" - 1","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86782\/"},"67":{"tweet_id":68,"author":"pmah0009","tweet_date":"03\/16\/2019 23:10","text":"","topicid":"3_1","location":1,"type":"important","sect_Title":" Working with mobile web apps ","comment":"With native android programming, applications are written in a programming language called Java and they call code in APIs known as the Android Frameworks in order to do tasks such as drawing on a canvas or accessing sensors on the device.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/37253\/"},"68":{"tweet_id":69,"author":"mala0006","tweet_date":"03\/17\/2019 09:47","text":"","topicid":"3_1","location":1,"type":"important","sect_Title":" Working with mobile web apps ","comment":"Android Frameworks in order to do tasks such as drawing on a canvas or accessing sensors on the device. Java code must be compiled into Java byte-code, which is a representation of the code that is readable by a Java virtual machine and can be more efficiently executed by the system.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/37253\/"},"69":{"tweet_id":70,"author":"mala0006","tweet_date":"03\/17\/2019 10:20","text":"","topicid":"3_1","location":1,"type":"important","sect_Title":" Working with mobile web apps ","comment":"a means for for drawing to the screen or reading sensors, etc. A web app is executed by visiting a website.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/37253\/"},"70":{"tweet_id":71,"author":"mala0006","tweet_date":"03\/17\/2019 21:51","text":"","topicid":"3_2","location":1,"type":"important","sect_Title":" JavaScript 3:00 Execution Control Structures ","comment":"JavaScript has syntax that allows a code block to be repeatedly executed while some condition is true. It\u2019s called a repetition, iteration or loop structure.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86782\/"},"71":{"tweet_id":72,"author":"mala0006","tweet_date":"03\/17\/2019 21:52","text":"","topicid":"3_2","location":1,"type":"important","sect_Title":" JavaScript 3:00 Execution Control Structures ","comment":"Both of these control structures require syntax for:\n\nSeparating statement sequences into blocks that are to executed conditionally or repetitively, and\nSpecifying the condition under which selection or repetition occurs.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86782\/"},"72":{"tweet_id":73,"author":"lkwa0002","tweet_date":"03\/18\/2019 00:25","text":"","topicid":"3_2","location":1,"type":"important","sect_Title":" JavaScript 3:00 Execution Control Structures ","comment":"Code blocks do not need a semicolon (;) after them, but each statement inside them does. Do not place semicolons after the if, else or while keywords or after a condition. The latter mistake is particularly troublesome as it does not result in a syntax error but rather ends the control structure early before its associated code block (which is then executed unconditionally).","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86782\/"},"73":{"tweet_id":74,"author":"dgal0009","tweet_date":"03\/18\/2019 10:30","text":"","topicid":"3_2","location":3,"type":"confusing","sect_Title":" JavaScript 3:00 Execution Control Structures ","comment":"+= i ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86782\/"},"74":{"tweet_id":75,"author":"nban0004","tweet_date":"03\/18\/2019 12:02","text":"","topicid":"3_2","location":1,"type":"comment","sect_Title":" JavaScript 3:00 Execution Control Structures ","comment":"ou can see that a code block is delineated by enclosing it in braces ({...}).","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86782\/"},"75":{"tweet_id":76,"author":"nban0004","tweet_date":"03\/18\/2019 12:03","text":"","topicid":"3_2","location":3,"type":"important","sect_Title":" JavaScript 3:00 Execution Control Structures ","comment":"ay. Once the ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86782\/"},"76":{"tweet_id":77,"author":"nban0004","tweet_date":"03\/18\/2019 12:04","text":"","topicid":"3_2","location":3,"type":"important","sect_Title":" JavaScript 3:00 Execution Control Structures ","comment":"ay. Once the ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86782\/"},"77":{"tweet_id":78,"author":"nban0004","tweet_date":"03\/18\/2019 12:04","text":"","topicid":"3_2","location":3,"type":"important","sect_Title":" JavaScript 3:00 Execution Control Structures ","comment":"ay. Once the ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86782\/"},"78":{"tweet_id":79,"author":"nban0004","tweet_date":"03\/18\/2019 12:06","text":"","topicid":"3_2","location":3,"type":"important","sect_Title":" JavaScript 3:00 Execution Control Structures ","comment":"It\u2019s worth noting the sentinel can never be a legal input. It\u2019s an indicator not legal data. For instance we do not store it in the array in the following code and it\u2019s therefore not part of the average calculation.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86782\/"},"79":{"tweet_id":80,"author":"dngu0026","tweet_date":"03\/19\/2019 05:09","text":"","topicid":"14_6","location":3,"type":"important","sect_Title":" Prac 3 instructions   ","comment":" ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86848\/"},"80":{"tweet_id":81,"author":"nami0004","tweet_date":"03\/20\/2019 03:24","text":"","topicid":"3_1","location":1,"type":"important","sect_Title":" Working with mobile web apps ","comment":"eb app programming, the code is written predominantly in JavaScript (with a small amount of HTML and CSS)","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/37253\/"},"81":{"tweet_id":82,"author":"nami0004","tweet_date":"03\/20\/2019 03:24","text":"","topicid":"3_1","location":1,"type":"important","sect_Title":" Working with mobile web apps ","comment":"w","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/37253\/"},"82":{"tweet_id":83,"author":"kbou0004","tweet_date":"03\/22\/2019 06:23","text":"","topicid":"4_1","location":1,"type":"confusing","sect_Title":" JavaScript 4:00 Functions   ","comment":"A parameter is a variable used to hold an input into a function.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"83":{"tweet_id":84,"author":"kbou0004","tweet_date":"03\/22\/2019 06:59","text":"","topicid":"4_1","location":1,"type":"confusing","sect_Title":" JavaScript 4:00 Functions   ","comment":"Functions that do not return values\nIn the following code a function performs an addition and date stamps it. The formatted result is displayed in an alert pop-up dialogue. The function declaration and two calls to the function are shown.\n123456789101112131415let aVariable = 7;\u00a0addAndTimeStamp(1, 2);addAndTimeStamp(Math.sin(0.5), aVariable + 10);\u00a0function addAndTimeStamp(number1, number2){\u00a0\u00a0\u00a0\u00a0let now = new Date();\u00a0\u00a0\u00a0\u00a0let output = \"\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let sum = number1 + number2;\u00a0\u00a0\u00a0\u00a0output = sum.toFixed(2) + \" (calculated at: \" + now.toLocaleTimeString()\u00a0 + \")\";\u00a0\u00a0\u00a0\u00a0\u00a0alert(output);}\n3.00 (calculated at: 17:32:21) \u00a0 \u00a0 \u00a0\u00a0displayed in alert pop up\n17.48 (calculated at: 17:32:30) \u00a0 \u00a0\u00a0displayed in alert pop up\nIn this example, the function is named addAndTimeStamp. It has two parameters, number1 and number2. The block following line 6 is the body of the function.\nThe first thing to notice here is that there is code within the function and code outside the function. The code within the function will NOT execute unless the function is called, which it is here (twice) by code outside the function. We will summarise the order that code executes in a web page shortly, but for now let\u2019s concentrate on function declarations and function calls.\nTake note of the syntax for defining and calling a function, and the execution sequence resulting from a call to such a function:\n12345678910myFunction(argument1, argument2, ...); \/\/ Function call\u00a0\/\/ Function declaration:function myFunction(parameter1, parameter2, ...)\u00a0 { \u00a0\u00a0\u00a0\u00a0\/\/ Body of the function\u00a0\u00a0\u00a0\u00a0\/\/ ...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return; \/\/ Optional, function will return at end of body.}\nAt time of call, the arguments are each evaluated to a single value. These values are used to initialise the corresponding parameter of each argument. Then the body of the function is executed until a return statement or the function body\u2019s closing brace (}) is encountered. At this point execution continues in the calling code with the statement after the function call statement.\nYou should be able to deduce from the above that arguments can be any expression (i.e., evaluate to a single value) but parameters must be a variable name. Arguments and parameters are matched by having the same position in the respective argument and parameter lists of the function call and declaration.\nFunctions that do return values\nOur first function has a problem. Although it\u2019s flexible in terms of the numbers it adds up (because they are parameterised) it is restrictive with respect to its output. That is, the result is always shown in a pop-up dialogue box, and thus it can\u2019t be used for further calculation. To fix this, we will allow the function to do the addition and time stamping but allow the calling code to decide how the result is used or displayed. To do this we will change the function so that it returns the output String rather than displaying it itself.\n123456789101112131415let outputAreaRef = document.getElementById(\"outputArea\");let aVariable = 7;\u00a0alert(addAndTimeStamp(1, 2));outputAreaRef.innerHTML = \"Sum = \" + addAndTimeStamp(Math.sin(0.5), aVariable + 10);\u00a0function addAndTimeStamp(number1, number2){\u00a0\u00a0\u00a0\u00a0let now = new Date();\u00a0\u00a0\u00a0\u00a0\u00a0let sum = number1 + number2;\u00a0\u00a0\u00a0\u00a0let result = sum.toFixed(2) + \" (calculated at: \" + now.toLocaleTimeString()\u00a0 + \")\";\u00a0\u00a0\u00a0\u00a0\u00a0return result;}\n3.00 (calculated at: 18:02:44) \u00a0 \u00a0 \u00a0\u00a0displayed in alert pop up\nSum = 17.48 (calculated at: 18:02:50) \u00a0 \u00a0\u00a0displayed in a div on web page\n\n\n\nThere are several important syntax and semantic changes here.\n\nThe function calls are no longer standalone statements but embedded in expressions\n\nThe call occurs as it is encountered during evaluation of the expression it\u2019s embedded in\nTherefore, the function executes while the calling statement has only partially executed\n\n\nThe function contains a return statement which both specifies the value to return and terminates execution of the function\nWhen the function returns to the calling code its call is replaced by its return value in the expression the call was embedded in\nThen the calling statement can continue evaluation of the expression and eventually\u00a0complete its own execution","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"84":{"tweet_id":85,"author":"kbou0004","tweet_date":"03\/22\/2019 07:07","text":"","topicid":"4_1","location":2,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"Remember HTML, when rendered, collapses all contiguous white space (spaces, tabs, line breaks) into a single space (it\u2019s called normalisation). To create a line break you must use the HTML br element.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"85":{"tweet_id":86,"author":"nsha0030","tweet_date":"03\/22\/2019 07:52","text":"","topicid":"14_6","location":1,"type":"confusing","sect_Title":" Prac 3 instructions   ","comment":"You should finish your meeting within the\u00a0time limit, and make sure you have sufficient discussion on when to meet next and what needs to be discussed next","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86848\/"},"86":{"tweet_id":87,"author":"lkwa0002","tweet_date":"03\/23\/2019 10:12","text":"","topicid":"4_1","location":3,"type":"interesting","sect_Title":" JavaScript 4:00 Functions   ","comment":"When there is a local variable in a function with the same name as a global variable, this variable name will refer to the local variable.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"87":{"tweet_id":88,"author":"lkwa0002","tweet_date":"03\/23\/2019 10:19","text":"","topicid":"4_1","location":3,"type":"confusing","sect_Title":" JavaScript 4:00 Functions   ","comment":"undefined","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"88":{"tweet_id":89,"author":"kbou0004","tweet_date":"03\/23\/2019 10:26","text":"","topicid":"4_1","location":1,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":" A parameter is a variable used to hold an input into a function.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"89":{"tweet_id":90,"author":"kbou0004","tweet_date":"03\/23\/2019 10:34","text":"","topicid":"4_1","location":1,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"Arguments and parameters are matched by having the same position in the respective argument and parameter lists of the function call and declaration.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"90":{"tweet_id":91,"author":"kbou0004","tweet_date":"03\/23\/2019 10:43","text":"","topicid":"4_1","location":1,"type":"confusing","sect_Title":" JavaScript 4:00 Functions   ","comment":"When the function returns to the calling code its call is replaced by its return value in the expression the call was embedded in\nThen the calling statement can continue evaluation of the expression and eventually\u00a0complete its own execution","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"91":{"tweet_id":92,"author":"kbou0004","tweet_date":"03\/23\/2019 10:47","text":"","topicid":"4_1","location":1,"type":"confusing","sect_Title":" JavaScript 4:00 Functions   ","comment":"let sum = 0;\u00a0\u00a0\u00a0\u00a0for (let i = 0; i < numberArray.length; i++)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sum += numberArray[i];\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let result = (sum \/ numberArray.length).toFixed(2);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return result;","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"92":{"tweet_id":93,"author":"kbou0004","tweet_date":"03\/23\/2019 10:51","text":"","topicid":"4_1","location":2,"type":"confusing","sect_Title":" JavaScript 4:00 Functions   ","comment":"testForSideEffects(aNumber, anObject, anArray);","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"93":{"tweet_id":94,"author":"kbou0004","tweet_date":"03\/23\/2019 10:55","text":"","topicid":"4_1","location":2,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"Since variables hold a reference to an object (or an array) rather than a value, modifying them results in changes to the original.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"94":{"tweet_id":95,"author":"kbou0004","tweet_date":"03\/23\/2019 11:08","text":"","topicid":"4_1","location":2,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"their scope is all the code (script) associated with the web page","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"95":{"tweet_id":96,"author":"kbou0004","tweet_date":"03\/23\/2019 11:09","text":"","topicid":"4_1","location":2,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"their\u00a0scope is the entire\u00a0block no matter where they are declared within the block.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"96":{"tweet_id":97,"author":"kbou0004","tweet_date":"03\/23\/2019 11:09","text":"","topicid":"4_1","location":2,"type":"confusing","sect_Title":" JavaScript 4:00 Functions   ","comment":" their\u00a0scope is the entire\u00a0block no matter where they are declared within the block. ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"97":{"tweet_id":98,"author":"kbou0004","tweet_date":"03\/23\/2019 11:28","text":"","topicid":"4_1","location":3,"type":"confusing","sect_Title":" JavaScript 4:00 Functions   ","comment":"Constructor Functions","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"98":{"tweet_id":99,"author":"kbou0004","tweet_date":"03\/23\/2019 11:31","text":"","topicid":"4_1","location":4,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"In JavaScript functions are first class which means they can be assigned to a variable, and like any variable can be passed as a parameter to a function","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"99":{"tweet_id":100,"author":"kbou0004","tweet_date":"03\/23\/2019 11:33","text":"","topicid":"4_1","location":4,"type":"confusing","sect_Title":" JavaScript 4:00 Functions   ","comment":"Here is another example of first class functions in use.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"100":{"tweet_id":101,"author":"nahh0001","tweet_date":"03\/24\/2019 00:32","text":"","topicid":"4_1","location":1,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"If a task has to be performed multiple times at different locations in code, the code that performs the task needs to be repeated in each of these places.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"101":{"tweet_id":102,"author":"nahh0001","tweet_date":"03\/24\/2019 00:33","text":"","topicid":"4_1","location":1,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":" a hierarchy of short, easy to understand functions can be built up.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"102":{"tweet_id":103,"author":"nahh0001","tweet_date":"03\/24\/2019 00:40","text":"","topicid":"4_1","location":2,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":" to allow software engineers to concentrate on one function at a time.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"103":{"tweet_id":104,"author":"nahh0001","tweet_date":"03\/24\/2019 00:52","text":"","topicid":"4_1","location":2,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"Scope is a static concept. It does not depend on time","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"104":{"tweet_id":105,"author":"nahh0001","tweet_date":"03\/24\/2019 00:52","text":"","topicid":"4_1","location":2,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"local variables, cannot be accessed outside the block, but can be accessed by any blocks or functions within the block where the variable is declared.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"105":{"tweet_id":106,"author":"nahh0001","tweet_date":"03\/24\/2019 00:53","text":"","topicid":"4_1","location":2,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"var are scoped to their containing function (rather than block as with let)","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"106":{"tweet_id":107,"author":"nahh0001","tweet_date":"03\/24\/2019 00:54","text":"","topicid":"4_1","location":2,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"Local variables are created each time their block (or function) is executed","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"107":{"tweet_id":108,"author":"lkwa0002","tweet_date":"03\/24\/2019 09:10","text":"","topicid":"4_1","location":3,"type":"interesting","sect_Title":" JavaScript 4:00 Functions   ","comment":"From the output of the first statement of callMeOften2 it is clear that local variables are accessible everywhere in the block but their value will be undefined until the point of initialisation.\n\n\n\n\n","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"108":{"tweet_id":109,"author":"jqua0005","tweet_date":"03\/24\/2019 09:51","text":"","topicid":"14_6","location":4,"type":"confusing","sect_Title":" Prac 3 instructions   ","comment":"Exceptions: 2 5","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86848\/"},"109":{"tweet_id":110,"author":"vvat0002","tweet_date":"03\/24\/2019 10:46","text":"","topicid":"4_1","location":1,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":" but parameters must be a variable name. ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"110":{"tweet_id":111,"author":"mala0006","tweet_date":"03\/24\/2019 22:57","text":"","topicid":"4_1","location":1,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"parameters must be a variable name.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"111":{"tweet_id":112,"author":"mala0006","tweet_date":"03\/24\/2019 22:57","text":"","topicid":"4_1","location":1,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":" until a return statement or the function body\u2019s closing brace (}) is encountered.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"112":{"tweet_id":113,"author":"mala0006","tweet_date":"03\/24\/2019 23:21","text":"","topicid":"4_1","location":2,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"It does not depend on time.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"113":{"tweet_id":114,"author":"mala0006","tweet_date":"03\/24\/2019 23:22","text":"","topicid":"4_1","location":2,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":" global variables","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"114":{"tweet_id":115,"author":"mala0006","tweet_date":"03\/24\/2019 23:23","text":"","topicid":"4_1","location":2,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"local variables","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"115":{"tweet_id":116,"author":"mala0006","tweet_date":"03\/24\/2019 23:23","text":"","topicid":"4_1","location":2,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":" cannot be accessed outside the block","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"116":{"tweet_id":117,"author":"mala0006","tweet_date":"03\/24\/2019 23:23","text":"","topicid":"4_1","location":2,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":" but can be accessed by any blocks or functions within the block where the variable is declared.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"117":{"tweet_id":118,"author":"dgal0009","tweet_date":"03\/26\/2019 12:30","text":"","topicid":"14_8","location":3,"type":"important","sect_Title":" Prac 4 instructions   ","comment":"123456let testObj = {\u00a0\u00a0\u00a0\u00a0number: 1,","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86851\/"},"118":{"tweet_id":119,"author":"pmah0009","tweet_date":"03\/26\/2019 23:26","text":"","topicid":"14_8","location":4,"type":"confusing","sect_Title":" Prac 4 instructions   ","comment":"\n1","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86851\/"},"119":{"tweet_id":120,"author":"pmah0009","tweet_date":"03\/26\/2019 23:27","text":"","topicid":"14_8","location":4,"type":"confusing","sect_Title":" Prac 4 instructions   ","comment":"Q3.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86851\/"},"120":{"tweet_id":121,"author":"pmah0009","tweet_date":"03\/26\/2019 23:27","text":"","topicid":"14_8","location":4,"type":"confusing","sect_Title":" Prac 4 instructions   ","comment":"Q3.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86851\/"},"121":{"tweet_id":122,"author":"pmah0009","tweet_date":"03\/27\/2019 00:08","text":"","topicid":"14_8","location":3,"type":"confusing","sect_Title":" Prac 4 instructions   ","comment":"umb","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86851\/"},"122":{"tweet_id":123,"author":"nami0004","tweet_date":"03\/29\/2019 00:02","text":"","topicid":"14_8","location":4,"type":"confusing","sect_Title":" Prac 4 instructions   ","comment":"\n1234567891011121314let outputAreaRef = document.getElementById(\"outputArea\");let output = \"\";\u00a0function flexible(fOperation, operand1, operand2){\u00a0\u00a0\u00a0\u00a0let result\u00a0 = fOperation(operand1, operand2);\u00a0\u00a0\u00a0\u00a0\u00a0return result;}\u00a0output += flexible(function(num1, num2) {return num1 + num2}, 3, 5);output += flexible(function(num1, num2) {return num1 * num2}, 3, 5); \u00a0\u00a0outputAreaRef.innerHTML = output;","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86851\/"},"123":{"tweet_id":124,"author":"wleo0010","tweet_date":"03\/30\/2019 14:34","text":"","topicid":"5_1","location":2,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"_balance and other attributes (or methods) with an underscore to denote them as private.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"124":{"tweet_id":125,"author":"wleo0010","tweet_date":"03\/30\/2019 14:34","text":"","topicid":"5_1","location":2,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"Classes are always named with UpperCamelCase to distinguish them from variables and functions.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"125":{"tweet_id":126,"author":"wleo0010","tweet_date":"03\/30\/2019 14:39","text":"","topicid":"5_1","location":2,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":" constructor method to initialise its private attributes","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"126":{"tweet_id":127,"author":"wleo0010","tweet_date":"03\/30\/2019 14:49","text":"","topicid":"5_1","location":2,"type":"interesting","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"s beginning with an underscore.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"127":{"tweet_id":128,"author":"wleo0010","tweet_date":"03\/30\/2019 14:49","text":"","topicid":"5_1","location":2,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"Attributes","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"128":{"tweet_id":129,"author":"wleo0010","tweet_date":"03\/30\/2019 14:49","text":"","topicid":"5_1","location":2,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"Accessors (getters)","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"129":{"tweet_id":130,"author":"wleo0010","tweet_date":"03\/30\/2019 14:49","text":"","topicid":"5_1","location":2,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"Mutators (setters)","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"130":{"tweet_id":131,"author":"wleo0010","tweet_date":"03\/30\/2019 16:00","text":"","topicid":"5_1","location":3,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"marked as mutators with the set keyword should have a single parameter ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"131":{"tweet_id":132,"author":"wleo0010","tweet_date":"03\/30\/2019 16:00","text":"","topicid":"5_1","location":3,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"get keyword should have no parameters and return a single value","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"132":{"tweet_id":133,"author":"wleo0010","tweet_date":"03\/30\/2019 16:44","text":"","topicid":"5_1","location":3,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":" concept of code that uses the same interface to operate on different types of object in a general way","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"133":{"tweet_id":134,"author":"wleo0010","tweet_date":"03\/30\/2019 16:44","text":"","topicid":"5_1","location":3,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"Polymorphism","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"134":{"tweet_id":135,"author":"aabd0029","tweet_date":"03\/31\/2019 13:53","text":"","topicid":"5_1","location":2,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"_balance and other attributes (or methods) with an underscore to denote them as private","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"135":{"tweet_id":136,"author":"aabd0029","tweet_date":"03\/31\/2019 13:56","text":"","topicid":"5_1","location":2,"type":"confusing","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"To reference attributes and methods from code inside the body of any method of the class we use dot syntax with the this keyword to refer to the current instance, e.g., this._balance.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"136":{"tweet_id":137,"author":"mala0006","tweet_date":"03\/31\/2019 22:44","text":"","topicid":"5_1","location":2,"type":"interesting","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"\u00a0\u00a0\u00a0\u00a0deposit(depositAmount)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (depositAmount > 0)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this._balance += depositAmount;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0withdrawal(withdrawalAmount)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (withdrawalAmount < this._balance &&\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0withdrawalAmount <= 100 &&\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0withdrawalAmount > 0)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this._balance -= withdrawalAmount;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0}}\u00a0\/\/ Instantiate two class instanceslet accountA = new BankAccount(1000);let accountB = new BankAccount(0);\u00a0\u00a0accountA.withdrawal(50);accountA.withdrawal(150);\u00a0\u00a0accountB.deposit(10);accountB.deposit(-1000);accountB.withdrawal(5);\u00a0console.log(\"accountA balance: \" + accountA.balance);console.log(\"accountB balance: \" + accountB.balance);\u00a0\/\/ === The code below is new to this example ===\u00a0\/\/ Has no effect as there is no mutator method for balanceaccountA.balance = 0;\u00a0accountB.deposit(10);\u00a0\u00a0console.log(\"accountA balance: \" + accountA.balance);console.log(\"accountB balance: \" + accountB.balance);","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"137":{"tweet_id":138,"author":"wlao0002","tweet_date":"04\/01\/2019 11:57","text":"","topicid":"5_1","location":1,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"attributes are considered private and are accessed via public methods of the class.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"138":{"tweet_id":139,"author":"kbou0004","tweet_date":"04\/03\/2019 05:12","text":"","topicid":"14_1","location":2,"type":"confusing","sect_Title":" Prac 5 instructions   ","comment":" Using these as patterns code an accessor and mutator for the private variable _suit.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86858\/"},"139":{"tweet_id":140,"author":"kbou0004","tweet_date":"04\/03\/2019 05:12","text":"","topicid":"14_1","location":2,"type":"confusing","sect_Title":" Prac 5 instructions   ","comment":"Using these as patterns code an accessor and mutator for the private variable _suit.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86858\/"},"140":{"tweet_id":141,"author":"khir0008","tweet_date":"04\/06\/2019 14:51","text":"global copy stored on a Server- remote\rPersonal on the local computer which team members will do their work on \r","topicid":"6_1","location":2,"type":"important","sect_Title":" Configuration Management    ","comment":"Repositories","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86891\/"},"141":{"tweet_id":142,"author":"khir0008","tweet_date":"04\/06\/2019 14:51","text":"global copy stored on a Server- remote\rPersonal on the local computer which team members will do their work on \r","topicid":"6_1","location":2,"type":"important","sect_Title":" Configuration Management    ","comment":"Repositories","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86891\/"},"142":{"tweet_id":143,"author":"khir0008","tweet_date":"04\/06\/2019 15:09","text":"","topicid":"6_3","location":1,"type":"interesting","sect_Title":" Web app user interfaces in JavaScript","comment":"callback function","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86887\/"},"143":{"tweet_id":144,"author":"khir0008","tweet_date":"04\/06\/2019 15:09","text":"","topicid":"6_3","location":1,"type":"interesting","sect_Title":" Web app user interfaces in JavaScript","comment":"callback function","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86887\/"},"144":{"tweet_id":145,"author":"nahh0001","tweet_date":"04\/07\/2019 04:28","text":"","topicid":"6_1","location":3,"type":"important","sect_Title":" Configuration Management    ","comment":"store configurations as \u201ccommits\u201c,","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86891\/"},"145":{"tweet_id":146,"author":"nahh0001","tweet_date":"04\/07\/2019 04:28","text":"","topicid":"6_1","location":3,"type":"important","sect_Title":" Configuration Management    ","comment":"A configuration is a set of files and versions that are consistent with each other","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86891\/"},"146":{"tweet_id":147,"author":"nahh0001","tweet_date":"04\/07\/2019 04:28","text":"","topicid":"6_1","location":3,"type":"important","sect_Title":" Configuration Management    ","comment":"Sometimes, the software you are working on requires two or more divergent lines of development. These divergences are known as branches","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86891\/"},"147":{"tweet_id":148,"author":"nahh0001","tweet_date":"04\/07\/2019 04:39","text":"","topicid":"6_2","location":3,"type":"important","sect_Title":" Code documentation and review  ","comment":" replacing magic numbers with named variables.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/161246\/"},"148":{"tweet_id":149,"author":"nahh0001","tweet_date":"04\/07\/2019 04:43","text":"","topicid":"6_2","location":3,"type":"important","sect_Title":" Code documentation and review  ","comment":"a variable can be marked as constant by declaring it with the const keyword instead of let","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/161246\/"},"149":{"tweet_id":150,"author":"nahh0001","tweet_date":"04\/07\/2019 04:44","text":"","topicid":"6_2","location":4,"type":"important","sect_Title":" Code documentation and review  ","comment":"Code changes are shared as a diff and accompanying log message, and are known as a \u201cpatch\u201d","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/161246\/"},"150":{"tweet_id":151,"author":"nahh0001","tweet_date":"04\/07\/2019 04:45","text":"","topicid":"6_3","location":1,"type":"important","sect_Title":" Web app user interfaces in JavaScript","comment":"setTimeout function which takes a callback function as its first argument and a number of milliseconds as its second argument","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86887\/"},"151":{"tweet_id":152,"author":"nahh0001","tweet_date":"04\/07\/2019 04:48","text":"","topicid":"6_3","location":1,"type":"important","sect_Title":" Web app user interfaces in JavaScript","comment":" set of JavaScript and CSS libraries that can be used to provide common app components and to style standard controls to look like Android\u2019s Material Design style.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86887\/"},"152":{"tweet_id":153,"author":"nahh0001","tweet_date":"04\/07\/2019 04:50","text":"","topicid":"6_3","location":2,"type":"important","sect_Title":" Web app user interfaces in JavaScript","comment":"Create a new","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86887\/"},"153":{"tweet_id":154,"author":"nahh0001","tweet_date":"04\/07\/2019 04:50","text":"","topicid":"6_3","location":2,"type":"important","sect_Title":" Web app user interfaces in JavaScript","comment":"Set its attributes as required\nAttach it to an existing node in the DOM instance currently being rendered","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86887\/"},"154":{"tweet_id":155,"author":"kbou0004","tweet_date":"04\/07\/2019 05:30","text":"","topicid":"6_3","location":2,"type":"confusing","sect_Title":" Web app user interfaces in JavaScript","comment":"If the DOM node being created is associated with a visible HTML element it will not be rendered until it\u2019s attached to a node in the DOM instance currently being rendered.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86887\/"},"155":{"tweet_id":156,"author":"jqua0005","tweet_date":"04\/08\/2019 12:05","text":"","topicid":"6_1","location":2,"type":"confusing","sect_Title":" Configuration Management    ","comment":"The numbers -42,7 +42,7 specify that the following lines apply to line 42\u201349 (49 = 42 + 7) in the previous version of the file and the same lines in the new version.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86891\/"},"156":{"tweet_id":157,"author":"dgal0009","tweet_date":"04\/12\/2019 08:46","text":"","topicid":"14_12","location":4,"type":"confusing","sect_Title":" Prac 6 instructions   ","comment":"element, and it has two columns each of size 4 (roughly phone width). Adjust the text in these ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86861\/"},"157":{"tweet_id":158,"author":"kbou0004","tweet_date":"04\/14\/2019 04:14","text":"","topicid":"7_1","location":1,"type":"important","sect_Title":" Storing data persistently   ","comment":"They are sandboxed, which means they are isolated from the rest of the platform they run on for security reasons.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"158":{"tweet_id":159,"author":"nahh0001","tweet_date":"04\/14\/2019 04:15","text":"","topicid":"7_1","location":2,"type":"important","sect_Title":" Storing data persistently   ","comment":"null:","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"159":{"tweet_id":160,"author":"nahh0001","tweet_date":"04\/14\/2019 04:15","text":"","topicid":"7_1","location":2,"type":"important","sect_Title":" Storing data persistently   ","comment":"Object:","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"160":{"tweet_id":161,"author":"nahh0001","tweet_date":"04\/14\/2019 04:15","text":"","topicid":"7_1","location":2,"type":"important","sect_Title":" Storing data persistently   ","comment":"Number:","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"161":{"tweet_id":162,"author":"kbou0004","tweet_date":"04\/14\/2019 04:15","text":"","topicid":"7_1","location":1,"type":"important","sect_Title":" Storing data persistently   ","comment":"Cookies are data that is downloaded when you visit a web site and stored locally by the browser","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"162":{"tweet_id":163,"author":"nahh0001","tweet_date":"04\/14\/2019 04:15","text":"","topicid":"7_1","location":2,"type":"important","sect_Title":" Storing data persistently   ","comment":"Boolean","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"163":{"tweet_id":164,"author":"nahh0001","tweet_date":"04\/14\/2019 04:15","text":"","topicid":"7_1","location":2,"type":"important","sect_Title":" Storing data persistently   ","comment":"Array: ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"164":{"tweet_id":165,"author":"kbou0004","tweet_date":"04\/14\/2019 04:17","text":"","topicid":"7_1","location":1,"type":"important","sect_Title":" Storing data persistently   ","comment":"The latest versions of HTML and all modern browsers support a stage API called Local Storage","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"165":{"tweet_id":166,"author":"nahh0001","tweet_date":"04\/14\/2019 04:20","text":"","topicid":"7_1","location":3,"type":"important","sect_Title":" Storing data persistently   ","comment":"an object can be converted (stringified) to a JSON string and saved to Local Storage. ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"166":{"tweet_id":167,"author":"kbou0004","tweet_date":"04\/14\/2019 04:22","text":"","topicid":"7_1","location":1,"type":"important","sect_Title":" Storing data persistently   ","comment":" In the case of Local Storage we must convert these objects to Strings because that is the only data format Local Storage accepts.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"167":{"tweet_id":168,"author":"kbou0004","tweet_date":"04\/14\/2019 04:23","text":"","topicid":"7_1","location":2,"type":"important","sect_Title":" Storing data persistently   ","comment":"In general the process of converting object data to a format that can be stored or transmitted (commonly a String) is called serialisation or stringifying and the reverse process is called de-serialisation or parsing.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"168":{"tweet_id":169,"author":"kbou0004","tweet_date":"04\/14\/2019 04:24","text":"","topicid":"7_1","location":1,"type":"important","sect_Title":" Storing data persistently   ","comment":"It only supports saving key\/value String pairs","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"169":{"tweet_id":170,"author":"kbou0004","tweet_date":"04\/14\/2019 04:26","text":"","topicid":"7_1","location":2,"type":"important","sect_Title":" Storing data persistently   ","comment":"SON is specified as a String not an Object,","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"170":{"tweet_id":171,"author":"kbou0004","tweet_date":"04\/14\/2019 04:26","text":"","topicid":"7_1","location":2,"type":"important","sect_Title":" Storing data persistently   ","comment":"JSON ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"171":{"tweet_id":172,"author":"kbou0004","tweet_date":"04\/14\/2019 04:26","text":"","topicid":"7_1","location":2,"type":"important","sect_Title":" Storing data persistently   ","comment":"it does not support function properties (only data properties), and property names in JSON formatted strings are enclosed in quotes.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"172":{"tweet_id":173,"author":"kbou0004","tweet_date":"04\/14\/2019 04:29","text":"","topicid":"7_1","location":2,"type":"important","sect_Title":" Storing data persistently   ","comment":"while within each pair the colon \u2018:\u2019 character separates the key or name from its value","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"173":{"tweet_id":174,"author":"kbou0004","tweet_date":"04\/14\/2019 04:32","text":"","topicid":"7_1","location":2,"type":"important","sect_Title":" Storing data persistently   ","comment":"Consider the following example of a JavaScript object created using JavaScript object literal notation.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"174":{"tweet_id":175,"author":"kbou0004","tweet_date":"04\/14\/2019 04:34","text":"","topicid":"7_1","location":3,"type":"important","sect_Title":" Storing data persistently   ","comment":"Remember Local Storage can only store strings and JSON is a string data format that can express an object\u2019s data and its structure.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"175":{"tweet_id":176,"author":"kbou0004","tweet_date":"04\/14\/2019 04:56","text":"","topicid":"7_2","location":3,"type":"important","sect_Title":" Intro to Software Engineering Processes ","comment":"The Requirements phase involves figuring out what needs to be done. Design deals with how to get things done. The Implementation phase involves writing code to do the task. Verification deals with quality assurances. All these phases are covered in more detail in future modules.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"176":{"tweet_id":177,"author":"kbou0004","tweet_date":"04\/14\/2019 05:02","text":"","topicid":"7_2","location":4,"type":"important","sect_Title":" Intro to Software Engineering Processes ","comment":"A Project Management Plan (PMP) is intended to be a good internal introduction document that gives all the information necessary to get started with the project","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"177":{"tweet_id":178,"author":"kbou0004","tweet_date":"04\/14\/2019 12:59","text":"","topicid":"7_1","location":1,"type":"important","sect_Title":" Storing data persistently   ","comment":"Cookies are limited to small amount of text (up to 4KB). Cookies also have an expiry and will be kept until they expire or are deleted by the user. The expiry and size limitations mean that cookies are not a good solutions for web apps to store data.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"178":{"tweet_id":179,"author":"ssin122","tweet_date":"04\/14\/2019 15:21","text":"hh","topicid":"6_3","location":1,"type":"comment","sect_Title":" Web app user interfaces in JavaScript","comment":"r a particular a","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86887\/"},"179":{"tweet_id":180,"author":"ssin122","tweet_date":"04\/14\/2019 15:27","text":"r","topicid":"6_3","location":1,"type":"help","sect_Title":" Web app user interfaces in JavaScript","comment":"great deta","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86887\/"},"180":{"tweet_id":181,"author":"mala0006","tweet_date":"04\/14\/2019 23:46","text":"","topicid":"7_1","location":1,"type":"interesting","sect_Title":" Storing data persistently   ","comment":"serialisation or stringifying","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"181":{"tweet_id":182,"author":"mala0006","tweet_date":"04\/15\/2019 00:00","text":"","topicid":"7_1","location":3,"type":"interesting","sect_Title":" Storing data persistently   ","comment":" It can then later be retrieved as a JSON string and reassembled (parsed) into an object","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"182":{"tweet_id":183,"author":"jgib0003","tweet_date":"04\/15\/2019 06:18","text":"","topicid":"7_1","location":1,"type":"important","sect_Title":" Storing data persistently   ","comment":"The local data lives only while its function executes.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"183":{"tweet_id":184,"author":"jgib0003","tweet_date":"04\/15\/2019 06:19","text":"","topicid":"7_1","location":1,"type":"interesting","sect_Title":" Storing data persistently   ","comment":"None of the data is persistent between page load of the same page and certainly not between browser sessions.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"184":{"tweet_id":185,"author":"jgib0003","tweet_date":"04\/15\/2019 06:20","text":"","topicid":"7_1","location":1,"type":"important","sect_Title":" Storing data persistently   ","comment":"The expiry and size limitations mean that cookies are not a good solutions for web apps to store data.\n\n","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"185":{"tweet_id":186,"author":"jgib0003","tweet_date":"04\/15\/2019 06:20","text":"","topicid":"7_1","location":1,"type":"important","sect_Title":" Storing data persistently   ","comment":"Browsers can allocate up to 5MB of sandboxed data per web domain\nA web domain can support many web applications but they must all share the same Local Storage\nOnly web applications from the same domain can access their shared Local Storage data\nUnlike cookies, Local Storage data is never transferred to a server\nIt only supports saving key\/value String pairs","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"186":{"tweet_id":187,"author":"jgib0003","tweet_date":"04\/15\/2019 06:21","text":"","topicid":"7_1","location":1,"type":"important","sect_Title":" Storing data persistently   ","comment":"You must first check that your browser supports it:","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"187":{"tweet_id":188,"author":"jgib0003","tweet_date":"04\/15\/2019 06:22","text":"","topicid":"7_1","location":1,"type":"important","sect_Title":" Storing data persistently   ","comment":"You can store a String value together with its String key in local storage by calling the setItem() method of the localStorage object:","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"188":{"tweet_id":189,"author":"jgib0003","tweet_date":"04\/15\/2019 06:22","text":"","topicid":"7_1","location":1,"type":"important","sect_Title":" Storing data persistently   ","comment":"You can retrieve a String value from Local Storage by calling the getItem() method and giving it as an argument the String key of the item you want to retrieve:","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"189":{"tweet_id":190,"author":"jgib0003","tweet_date":"04\/15\/2019 06:22","text":"","topicid":"7_1","location":1,"type":"important","sect_Title":" Storing data persistently   ","comment":"Finally, you can clear a key\/value pair from Local Storage by calling the removeItem() method and giving the appropriate String key as an argument:","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"190":{"tweet_id":191,"author":"jgib0003","tweet_date":"04\/15\/2019 06:24","text":"","topicid":"7_1","location":1,"type":"important","sect_Title":" Storing data persistently   ","comment":"Please note, there is also an object called sessionStorage with the same interface (i.e., methods) as localStorage. Data in sessionStorage persists across page reloads, but only until the browser is next closed, and so cannot be used for permanent storage.\n","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"191":{"tweet_id":192,"author":"jgib0003","tweet_date":"04\/15\/2019 06:24","text":"","topicid":"7_1","location":1,"type":"important","sect_Title":" Storing data persistently   ","comment":"It is also possible to use localStorage with dot-notation like a normal object, so long as the key fits the variable naming requirement. For example:","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"192":{"tweet_id":193,"author":"jgib0003","tweet_date":"04\/15\/2019 06:25","text":"","topicid":"7_1","location":1,"type":"important","sect_Title":" Storing data persistently   ","comment":" In the case of Local Storage we must convert these objects to Strings because that is the only data format Local Storage accepts.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"193":{"tweet_id":194,"author":"jgib0003","tweet_date":"04\/15\/2019 06:27","text":"","topicid":"7_1","location":1,"type":"important","sect_Title":" Storing data persistently   ","comment":"As you can imagine stringifying objects to strings and and parsing these strings back to objects are common tasks as web application data is stored and retrieved.\n","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"194":{"tweet_id":195,"author":"jgib0003","tweet_date":"04\/15\/2019 06:27","text":"","topicid":"7_1","location":1,"type":"important","sect_Title":" Storing data persistently   ","comment":"the process of converting object data to a format that can be stored or transmitted (commonly a String) is called serialisation or stringifying and the reverse process is called de-serialisation or parsing.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"195":{"tweet_id":196,"author":"jgib0003","tweet_date":"04\/15\/2019 06:27","text":"","topicid":"7_1","location":1,"type":"important","sect_Title":" Storing data persistently   ","comment":"These Strings must encode the data and the structure of the objects so that they can be retrieved and reconstituted later.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"196":{"tweet_id":197,"author":"jgib0003","tweet_date":"04\/15\/2019 06:28","text":"","topicid":"7_1","location":2,"type":"important","sect_Title":" Storing data persistently   ","comment":"the user\u2019s data can be available and subsequently modified from multiple devices and computers. The downside is that cloud storage requires a web connection most of the time.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"197":{"tweet_id":198,"author":"jgib0003","tweet_date":"04\/15\/2019 06:30","text":"","topicid":"7_1","location":2,"type":"important","sect_Title":" Storing data persistently   ","comment":"The rules for building JavaScript objects using this literal notation are very simple and yet they have the power to express extremely complex data structures.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"198":{"tweet_id":199,"author":"jgib0003","tweet_date":"04\/15\/2019 06:32","text":"","topicid":"7_1","location":2,"type":"important","sect_Title":" Storing data persistently   ","comment":"In JavaScript there is a standard, built-in object JSON with methods to serialise JavaScript objects to JSON formatted strings (stringify()) and de-serialise these strings back to JavaScript objects (parse()).","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"199":{"tweet_id":200,"author":"jgib0003","tweet_date":"04\/15\/2019 06:33","text":"","topicid":"7_1","location":3,"type":"important","sect_Title":" Storing data persistently   ","comment":"So an object can be converted (stringified) to a JSON string and saved to Local Storage. It can then later be retrieved as a JSON string and reassembled (parsed) into an object.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"200":{"tweet_id":201,"author":"jgib0003","tweet_date":"04\/15\/2019 06:42","text":"","topicid":"7_2","location":1,"type":"important","sect_Title":" Intro to Software Engineering Processes ","comment":"So, why does \u201cjust coding\u201d fail as software complexity increases?\n\nIt takes longer to get a complex app\/program working.\nThe final product might not do what is intended to do.\nIt becomes harder to fix bugs in code (think of how long it took for you to debug common issues in weekly labs, then think of how time will scale as LOC increases).\nThe code can\u2019t easily be extended later to support more functionality.\nIt might not be possible implement the required functionality without restructuring code (possibly even multiple times).","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"201":{"tweet_id":202,"author":"jgib0003","tweet_date":"04\/15\/2019 06:46","text":"","topicid":"7_2","location":1,"type":"important","sect_Title":" Intro to Software Engineering Processes ","comment":"Software engineering is the design, development and maintenance of software via the application of engineering principles and practices.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"202":{"tweet_id":203,"author":"jgib0003","tweet_date":"04\/15\/2019 06:46","text":"","topicid":"7_2","location":1,"type":"interesting","sect_Title":" Intro to Software Engineering Processes ","comment":"Solutions to engineering problems tend to get more complex as the size of the problem grows and as a result the Engineering process becomes more important. Software is no different. Just as the design and structure of a bridge is critical to it being able to serve its intended purpose, so too is the design and structure of software.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"203":{"tweet_id":204,"author":"jgib0003","tweet_date":"04\/15\/2019 06:47","text":"","topicid":"7_2","location":1,"type":"important","sect_Title":" Intro to Software Engineering Processes ","comment":"Many ways to achieve same aim","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"204":{"tweet_id":205,"author":"jgib0003","tweet_date":"04\/15\/2019 06:47","text":"","topicid":"7_2","location":1,"type":"interesting","sect_Title":" Intro to Software Engineering Processes ","comment":"Unconstrained by physical lawsIn many engineering disciplines, constraints and requirements are imposed by the environment. Gravity is a constant force, just as the properties of steel under various conditions are known. This knowledge of the physical world gives us something to build on and also limits what is possible. This is not the case for software. Software starts from a completely blank slate where even \u201cfundamental\u201d rules like gravity need to be programmed into the system. This gives software an incredible flexibility and makes it useful for a diverse range of application areas, but also leads to less that can be depended upon.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"205":{"tweet_id":206,"author":"jgib0003","tweet_date":"04\/15\/2019 06:47","text":"","topicid":"7_2","location":1,"type":"interesting","sect_Title":" Intro to Software Engineering Processes ","comment":"In many engineering disciplines, constraints and requirements are imposed by the environment. Gravity is a constant force, just as the properties of steel under various conditions are known. This knowledge of the physical world gives us something to build on and also limits what is possible. This is not the case for software. Software starts from a completely blank slate where even \u201cfundamental\u201d rules like gravity need to be programmed into the system. This gives software an incredible flexibility and makes it useful for a diverse range of application areas, but also leads to less that can be depended upon.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"206":{"tweet_id":207,"author":"jgib0003","tweet_date":"04\/15\/2019 06:47","text":"","topicid":"7_2","location":1,"type":"important","sect_Title":" Intro to Software Engineering Processes ","comment":"Unconstrained by physical laws","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"207":{"tweet_id":208,"author":"jgib0003","tweet_date":"04\/15\/2019 06:48","text":"","topicid":"7_2","location":1,"type":"important","sect_Title":" Intro to Software Engineering Processes ","comment":"Even though such components tend to be much more robust and tested than our own code, there can still be unexpected interactions between components.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"208":{"tweet_id":209,"author":"jgib0003","tweet_date":"04\/15\/2019 06:48","text":"","topicid":"7_2","location":1,"type":"important","sect_Title":" Intro to Software Engineering Processes ","comment":"Complexity","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"209":{"tweet_id":210,"author":"jgib0003","tweet_date":"04\/15\/2019 06:48","text":"","topicid":"7_2","location":1,"type":"important","sect_Title":" Intro to Software Engineering Processes ","comment":"immeasurable ways to solve the same problem,","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"210":{"tweet_id":211,"author":"jgib0003","tweet_date":"04\/15\/2019 06:50","text":"","topicid":"7_2","location":2,"type":"important","sect_Title":" Intro to Software Engineering Processes ","comment":"Deliver the software on time;\nDeliver the software on budget; and\nDeliver software that meets intended purpose.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"211":{"tweet_id":212,"author":"jgib0003","tweet_date":"04\/15\/2019 06:51","text":"","topicid":"7_2","location":2,"type":"important","sect_Title":" Intro to Software Engineering Processes ","comment":"The Requirements phase involves figuring out what needs to be done. Design deals with how to get things done. The Implementation phase involves writing code to do the task. Verification deals with quality assurances. All these phases are covered in more detail in future modules.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"212":{"tweet_id":213,"author":"jgib0003","tweet_date":"04\/15\/2019 06:51","text":"","topicid":"7_2","location":2,"type":"important","sect_Title":" Intro to Software Engineering Processes ","comment":"Design, Implement and Verify (test) something\nDecide next priority in consultation with client\nRepeat.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"213":{"tweet_id":214,"author":"jgib0003","tweet_date":"04\/15\/2019 06:51","text":"","topicid":"7_2","location":2,"type":"important","sect_Title":" Intro to Software Engineering Processes ","comment":"Agile development is a lightweight iterative methodology in common practice today. In this approach, the client is involved in the development process to direct the evolution of the software. The basic process is:","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"214":{"tweet_id":215,"author":"jgib0003","tweet_date":"04\/15\/2019 06:52","text":"","topicid":"7_2","location":3,"type":"important","sect_Title":" Intro to Software Engineering Processes ","comment":"Agile development has the advantage that it delivers something useful almost immediately, rather than at the conclusion of the project.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"215":{"tweet_id":216,"author":"jgib0003","tweet_date":"04\/15\/2019 06:52","text":"","topicid":"7_2","location":3,"type":"important","sect_Title":" Intro to Software Engineering Processes ","comment":"not just the app\/code, but also related deliverables such as documentation as well.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"216":{"tweet_id":217,"author":"jgib0003","tweet_date":"04\/15\/2019 06:53","text":"","topicid":"7_2","location":3,"type":"important","sect_Title":" Intro to Software Engineering Processes ","comment":"This approach obviously requires involvement (both time and interest) of the client, which can be beneficial but is not always possible. Another potential pitfall is that since requirements are refined on each iteration there is a danger of them becoming overly ambitious (scope creep).","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"217":{"tweet_id":218,"author":"jgib0003","tweet_date":"04\/15\/2019 06:57","text":"","topicid":"7_2","location":3,"type":"important","sect_Title":" Intro to Software Engineering Processes ","comment":"Agile methodologies are \u201crecommended practice by prominent software-engineering thought leaders of each decade\u201d","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"218":{"tweet_id":219,"author":"jgib0003","tweet_date":"04\/15\/2019 06:57","text":"","topicid":"7_2","location":3,"type":"important","sect_Title":" Intro to Software Engineering Processes ","comment":"A Project Management Plan (PMP) is intended to be a good internal introduction document that gives all the information necessary to get started with the project","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"219":{"tweet_id":220,"author":"ylee0045","tweet_date":"04\/16\/2019 11:49","text":"","topicid":"5_1","location":2,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"accountA and accountB are instantiated using the new keyword.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"220":{"tweet_id":221,"author":"ylee0045","tweet_date":"04\/16\/2019 11:51","text":"","topicid":"5_1","location":2,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"Classes are always named with UpperCamelCase to distinguish them from variables and functions.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"221":{"tweet_id":222,"author":"ylee0045","tweet_date":"04\/16\/2019 12:11","text":"","topicid":"6_1","location":1,"type":"important","sect_Title":" Configuration Management    ","comment":"A diff is a human-readable text file describing a set of line-by-line changes to a file. ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86891\/"},"222":{"tweet_id":223,"author":"kbou0004","tweet_date":"04\/16\/2019 13:24","text":"","topicid":"14_12","location":4,"type":"confusing","sect_Title":" Prac 6 instructions   ","comment":"You should put an empty span tag after the \u201cInches: \u201d label and give it an ID of \"cmToInchResult\" (so you can fill in this value later from JavaScript).","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86861\/"},"223":{"tweet_id":224,"author":"kbou0004","tweet_date":"04\/16\/2019 14:52","text":"","topicid":"14_12","location":4,"type":"confusing","sect_Title":" Prac 6 instructions   ","comment":"(including IDs InchToCMValue and InchToCMResult).","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86861\/"},"224":{"tweet_id":225,"author":"kbou0004","tweet_date":"04\/16\/2019 15:15","text":"","topicid":"14_12","location":4,"type":"important","sect_Title":" Prac 6 instructions   ","comment":"Step 2: Unit Converter app logic","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86861\/"},"225":{"tweet_id":226,"author":"ssin122","tweet_date":"04\/17\/2019 06:26","text":"","topicid":"7_1","location":1,"type":"interesting","sect_Title":" Storing data persistently   ","comment":" Mobile ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"226":{"tweet_id":227,"author":"ssin122","tweet_date":"04\/17\/2019 06:26","text":"","topicid":"7_1","location":1,"type":"important","sect_Title":" Storing data persistently   ","comment":"e Apps","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"227":{"tweet_id":228,"author":"ssin122","tweet_date":"04\/17\/2019 06:27","text":"","topicid":"7_1","location":1,"type":"interesting","sect_Title":" Storing data persistently   ","comment":"obile A","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"228":{"tweet_id":229,"author":"ssin122","tweet_date":"04\/17\/2019 06:27","text":"","topicid":"7_1","location":1,"type":"confusing","sect_Title":" Storing data persistently   ","comment":"ing Mob","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"229":{"tweet_id":230,"author":"wleo0010","tweet_date":"04\/17\/2019 16:31","text":"","topicid":"14_14","location":3,"type":"confusing","sect_Title":" Prac 7 instructions   ","comment":"lay Deck\u201d b","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86864\/"},"230":{"tweet_id":231,"author":"shen0012","tweet_date":"04\/19\/2019 04:59","text":"","topicid":"14_16","location":1,"type":"important","sect_Title":" Prac 8 instructions   ","comment":"should","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86867\/"},"231":{"tweet_id":232,"author":"jteh0008","tweet_date":"04\/24\/2019 12:10","text":"","topicid":"4_1","location":3,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"upper case letter","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"232":{"tweet_id":233,"author":"pgro0007","tweet_date":"04\/25\/2019 07:20","text":"Should it be, 'deck will not exist without cards', since the deck is a composition of cards?","topicid":"8_2","location":1,"type":"comment","sect_Title":" Software Design    ","comment":"Cards will not exist without a Deck.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86897\/"},"233":{"tweet_id":234,"author":"pgro0007","tweet_date":"04\/25\/2019 07:20","text":"Should it be, 'deck will not exist without cards', since the deck is a composition of cards?","topicid":"8_2","location":1,"type":"comment","sect_Title":" Software Design    ","comment":"Cards will not exist without a Deck.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86897\/"},"234":{"tweet_id":235,"author":"pgro0007","tweet_date":"04\/25\/2019 07:20","text":"Should it be, 'deck will not exist without cards', since the deck is a composition of cards?","topicid":"8_2","location":1,"type":"comment","sect_Title":" Software Design    ","comment":"Cards will not exist without a Deck.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86897\/"},"235":{"tweet_id":236,"author":"jteh0008","tweet_date":"04\/29\/2019 08:16","text":"","topicid":"8_2","location":1,"type":"important","sect_Title":" Software Design    ","comment":"completed","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86897\/"},"236":{"tweet_id":237,"author":"jqua0005","tweet_date":"04\/29\/2019 11:33","text":"","topicid":"8_1","location":2,"type":"confusing","sect_Title":" Requirements Analysis    ","comment":"client\u2019s language","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86894\/"},"237":{"tweet_id":238,"author":"ssin122","tweet_date":"05\/01\/2019 00:13","text":"","topicid":"9_1","location":1,"type":"confusing","sect_Title":" Software Verification    ","comment":"Software verification inv","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"238":{"tweet_id":239,"author":"mgoy0001","tweet_date":"05\/01\/2019 02:34","text":"The full form of INVEST and their explanations will definitly come in the final exam\r","topicid":"8_1","location":2,"type":"comment","sect_Title":" Requirements Analysis    ","comment":"A handy guide to the production of user stories is the INVEST mnemonic:\n\n\n\nIndependent\nUser stories should be self-contained.\n\n\nNegotiable\nUser stories should be able to be easily revised or replaced, such as with a different user story that satisfies the same outcome.\n\n\nValuable\nA user story must be beneficial to end users.\n\n\nEstimatable\nA user story should correspond to functionality for which implementation effort can be estimated.\n\n\nSmall\nUser stories must be small enough to be considered and scheduled independently.\n\n\nTestable\nThe user story must provide enough info to verify that it has been implemented satisfactorily.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86894\/"},"239":{"tweet_id":240,"author":"jqua0005","tweet_date":"05\/02\/2019 14:21","text":"","topicid":"2_2","location":1,"type":"confusing","sect_Title":" JavaScript 2:00 Data Types and Operations","comment":" expression? It produced the output I wanted","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/88560\/"},"240":{"tweet_id":241,"author":"jqua0005","tweet_date":"05\/02\/2019 14:21","text":"","topicid":"2_2","location":1,"type":"important","sect_Title":" JavaScript 2:00 Data Types and Operations","comment":"expression? It produced the output I wanted, but how?","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/88560\/"},"241":{"tweet_id":242,"author":"jqua0005","tweet_date":"05\/02\/2019 14:22","text":"","topicid":"2_2","location":1,"type":"important","sect_Title":" JavaScript 2:00 Data Types and Operations","comment":"expression? It produced the output I wanted, but how?","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/88560\/"},"242":{"tweet_id":243,"author":"jqua0005","tweet_date":"05\/03\/2019 05:33","text":"","topicid":"14_16","location":2,"type":"important","sect_Title":" Prac 8 instructions   ","comment":"Remember, the requirements should be able to be used to design the software, to develop tests and to write documentation.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86867\/"},"243":{"tweet_id":244,"author":"wleo0010","tweet_date":"05\/04\/2019 07:46","text":"","topicid":"9_2","location":3,"type":"confusing","sect_Title":" Internet Architecture and Web Services ","comment":"Wait\u2014this isn\u2019t JSON. It looks like a JavaScript function call to nameResult passing the JSON result we had before. If we can execute this code returned, we can get a function of our choosing to be passed the result of the web service call.\nHence, in order to call the web service in this way we would:\n\nDefine a function called nameResult that expects a JSON object as an argument.\nThen create a new script element that used the URL of the web service as the source.\n\nThe browser will request the content of this URL in the background. The URL content returned will be JavaScript code which will then be executed because it is in a script element. Execution of this code will result in a call to nameResult with the output from the request. The script tag specified in HTML would look like this:","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"244":{"tweet_id":245,"author":"wleo0010","tweet_date":"05\/04\/2019 07:50","text":"","topicid":"9_2","location":4,"type":"confusing","sect_Title":" Internet Architecture and Web Services ","comment":".p","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"245":{"tweet_id":246,"author":"bmah0011","tweet_date":"05\/05\/2019 01:49","text":"","topicid":"9_2","location":2,"type":"confusing","sect_Title":" Internet Architecture and Web Services ","comment":"asynchronous","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"246":{"tweet_id":247,"author":"bmah0011","tweet_date":"05\/05\/2019 02:02","text":"","topicid":"9_2","location":3,"type":"confusing","sect_Title":" Internet Architecture and Web Services ","comment":"and it will be given as an argument the data returned by the request. ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"247":{"tweet_id":248,"author":"kbou0004","tweet_date":"05\/05\/2019 08:04","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"Software verification involves testing code or software components in order to find errors or defects","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"248":{"tweet_id":249,"author":"kbou0004","tweet_date":"05\/05\/2019 08:05","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"Software verification involves testing code or software components in order to find errors or defects","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"249":{"tweet_id":250,"author":"kbou0004","tweet_date":"05\/05\/2019 08:15","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":"Unit tests stress small portions, or units, of code.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"250":{"tweet_id":251,"author":"kbou0004","tweet_date":"05\/05\/2019 08:15","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":"Integration tests examine the behaviour and communication between two or more components of a system.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"251":{"tweet_id":252,"author":"kbou0004","tweet_date":"05\/05\/2019 08:18","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":"System testing involves testing the complete application in order to check that it satisfies its requirements.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"252":{"tweet_id":253,"author":"kbou0004","tweet_date":"05\/05\/2019 08:19","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"Approaches that test the code or application without running it are known as static testing. ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"253":{"tweet_id":254,"author":"kbou0004","tweet_date":"05\/05\/2019 08:19","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"Testing approaches that perform tests on running code are known as dynamic testing.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"254":{"tweet_id":255,"author":"kbou0004","tweet_date":"05\/05\/2019 08:19","text":"","topicid":"9_1","location":3,"type":"important","sect_Title":" Software Verification    ","comment":"Static analysis is a form of static testing that involves automatic analysis of the code (without running it) to determine possible issues.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"255":{"tweet_id":256,"author":"kbou0004","tweet_date":"05\/05\/2019 08:20","text":"","topicid":"9_1","location":4,"type":"important","sect_Title":" Software Verification    ","comment":"Coverage testing involves running a special tool that executes your application many times, ideally using all your available test cases. ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"256":{"tweet_id":257,"author":"kbou0004","tweet_date":"05\/05\/2019 08:21","text":"","topicid":"9_1","location":4,"type":"important","sect_Title":" Software Verification    ","comment":"Regression testing involves re-running all existing tests written(functional and non functional) to ensure that the new feature, or change to the code doesn\u2019t introduce a new bug","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"257":{"tweet_id":258,"author":"kbou0004","tweet_date":"05\/05\/2019 08:30","text":"","topicid":"9_2","location":1,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"This is responsible for the delivery of messages between devices.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"258":{"tweet_id":259,"author":"kbou0004","tweet_date":"05\/05\/2019 08:31","text":"","topicid":"9_2","location":1,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"Effectively NAT lets a pool of devices, such as those in a single residence, share a single IP address. ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"259":{"tweet_id":260,"author":"kbou0004","tweet_date":"05\/05\/2019 08:33","text":"","topicid":"9_2","location":2,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"This method of making asynchronous requests within the current web page without affecting the display of the current page is\u00a0known as Ajax,","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"260":{"tweet_id":261,"author":"iros0003","tweet_date":"05\/05\/2019 18:20","text":"As every non-prime number necessarily has at least one divisor of value less than it, this is a bruce force method that checks for each divisor. Works, but of course inefficient, albeit fail-proof. \r\rThe exceptions of divisors of itself and 1 are taken care of by the divisor = candidate -1 declaration and the divisor>=2 condition respectively. \r\rThe Sieve of Erastothenes, developed millennia ago, for those interested, is a far more elegant and computationally superior approach. A modified version of it, for example, solves the problem in linear time","topicid":"3_2","location":4,"type":"comment","sect_Title":" JavaScript 3:00 Execution Control Structures ","comment":" Can you see how it does it?","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86782\/"},"261":{"tweet_id":262,"author":"jsut0005","tweet_date":"05\/10\/2019 04:24","text":"","topicid":"14_18","location":4,"type":"confusing","sect_Title":" Private: Prac 9 instructions  ","comment":"  Note: You may need to use Firefox for this activity","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86870\/"},"262":{"tweet_id":263,"author":"kbou0004","tweet_date":"05\/12\/2019 06:33","text":"","topicid":"10_1","location":1,"type":"important","sect_Title":" Algorithms and Efficiency   ","comment":"An algorithm is a series of instructions\u2014a precise recipe\u2014to solve a problem or produce a particular outcome.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86914\/"},"263":{"tweet_id":264,"author":"kbou0004","tweet_date":"05\/12\/2019 08:40","text":"","topicid":"10_1","location":2,"type":"important","sect_Title":" Algorithms and Efficiency   ","comment":"Complexity analysis is concerned with how optimal certain algorithms are, and particularly how much time, space (memory) or other resources they require to solve particular problems.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86914\/"},"264":{"tweet_id":265,"author":"kbou0004","tweet_date":"05\/12\/2019 08:41","text":"","topicid":"10_1","location":2,"type":"important","sect_Title":" Algorithms and Efficiency   ","comment":" dependent on the size of the input that the code is run on","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86914\/"},"265":{"tweet_id":266,"author":"kbou0004","tweet_date":"05\/12\/2019 08:43","text":"","topicid":"10_1","location":3,"type":"important","sect_Title":" Algorithms and Efficiency   ","comment":"Binary search is an algorithm that can be used to find the position of an element of a particular value in a sorted array. ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86914\/"},"266":{"tweet_id":267,"author":"kbou0004","tweet_date":"05\/12\/2019 08:45","text":"","topicid":"10_1","location":3,"type":"important","sect_Title":" Algorithms and Efficiency   ","comment":"Finding the lowest (or highest) value in an unsorted array is a linear time operation.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86914\/"},"267":{"tweet_id":268,"author":"kbou0004","tweet_date":"05\/12\/2019 08:45","text":"","topicid":"10_1","location":3,"type":"important","sect_Title":" Algorithms and Efficiency   ","comment":"Linear time algorithms take time directly proportional to the size of the input.\n","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86914\/"},"268":{"tweet_id":269,"author":"kbou0004","tweet_date":"05\/12\/2019 08:45","text":"","topicid":"10_1","location":3,"type":"important","sect_Title":" Algorithms and Efficiency   ","comment":"Our selection sort code in the example above runs in quadratic time, which means it takes time proportional to the square of the input size. ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86914\/"},"269":{"tweet_id":270,"author":"mgoy0001","tweet_date":"05\/13\/2019 10:59","text":"","topicid":"10_1","location":1,"type":"confusing","sect_Title":" Algorithms and Efficiency   ","comment":"ase Study: Sorting\nSorting is a good problem to discuss efficiency of algorithms from a practical perspective. The task of sorting is conceptually simple, but there are a variety of different ways to approach the problem.\nHere, we look at some sorting methods, and use this to show that not all algorithms are created equal.\nSelection Sort\nOne simple algorithm for sorting an array of items is selection sort.\nConceptually, selection sort works by progressively building a list of elements in sorted order from left to right. To add each new element it selects the lowest value from the remaining unsorted list and swaps this into place.\nA good animation is at http:\/\/sorting.at\u2014it helps ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86914\/"},"270":{"tweet_id":271,"author":"kbou0004","tweet_date":"05\/15\/2019 06:41","text":"","topicid":"14_2","location":3,"type":"important","sect_Title":" Private: Prac 10 instructions  ","comment":"Create a third array arr3 with identical content with the other two arrays\nCall the bubbleSort function on arr3","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86873\/"},"271":{"tweet_id":272,"author":"kbou0004","tweet_date":"05\/15\/2019 06:41","text":"","topicid":"14_2","location":3,"type":"important","sect_Title":" Private: Prac 10 instructions  ","comment":"Display a message in the outputArea div when the bubbleSort function finishes","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86873\/"},"272":{"tweet_id":273,"author":"kbou0004","tweet_date":"05\/15\/2019 06:41","text":"","topicid":"14_2","location":3,"type":"important","sect_Title":" Private: Prac 10 instructions  ","comment":"At this stage, SortPerformance.html has no references to the sorting functions in other JavaScript files. Import both the JS files by adding script tags with those js files as the source (src).","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86873\/"},"273":{"tweet_id":274,"author":"kbou0004","tweet_date":"05\/15\/2019 06:48","text":"","topicid":"14_2","location":3,"type":"important","sect_Title":" Private: Prac 10 instructions  ","comment":"At this stage, SortPerformance.html has no references to the sorting functions in other JavaScript files. Import both the JS files by adding script tags with those js files as the source (src).\nAfter importing the JS files, modify SortPerformance.html to\n\nCreate a third array arr3 with identical content with the other two arrays\nCall the bubbleSort function on arr3\nDisplay a message in the outputArea div when the bubbleSort function finishes","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86873\/"},"274":{"tweet_id":275,"author":"wleo0010","tweet_date":"05\/16\/2019 13:14","text":"","topicid":"14_2","location":3,"type":"important","sect_Title":" Private: Prac 10 instructions  ","comment":"swapped = false;","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86873\/"},"275":{"tweet_id":276,"author":"wleo0010","tweet_date":"05\/16\/2019 13:14","text":"","topicid":"14_2","location":3,"type":"important","sect_Title":" Private: Prac 10 instructions  ","comment":"do","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86873\/"},"276":{"tweet_id":277,"author":"wleo0010","tweet_date":"05\/16\/2019 13:14","text":"","topicid":"14_2","location":3,"type":"confusing","sect_Title":" Private: Prac 10 instructions  ","comment":"let swapped = false;","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86873\/"},"277":{"tweet_id":278,"author":"wleo0010","tweet_date":"05\/16\/2019 13:17","text":"","topicid":"14_2","location":3,"type":"important","sect_Title":" Private: Prac 10 instructions  ","comment":" selection sort is highly inefficient compared to JavaScript\u2019s Array.sort method","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86873\/"},"278":{"tweet_id":279,"author":"wleo0010","tweet_date":"05\/17\/2019 02:49","text":"","topicid":"14_2","location":4,"type":"important","sect_Title":" Private: Prac 10 instructions  ","comment":"Notice how bubble sort now takes effectively no time. Think about how bubble sort works and you should be able to explain why this is. Discuss it with your demonstrator.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86873\/"},"279":{"tweet_id":280,"author":"kbou0004","tweet_date":"05\/17\/2019 10:52","text":"","topicid":"11_1","location":1,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"A bit\u2014binary digit\u2014is the smallest unit of information and stores just a single 0 or 1.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"280":{"tweet_id":281,"author":"kbou0004","tweet_date":"05\/17\/2019 11:43","text":"","topicid":"11_1","location":2,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"logic gates are components that take one or more inputs consisting of signals of either 0 or 1 ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"281":{"tweet_id":282,"author":"kbou0004","tweet_date":"05\/17\/2019 11:48","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"he processor\u2014also known as the Central Processing Unit (CPU)\u2014is responsible for executing the instructions of programs.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"282":{"tweet_id":283,"author":"kbou0004","tweet_date":"05\/17\/2019 11:53","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":" individual instructions can executed per second.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"283":{"tweet_id":284,"author":"kbou0004","tweet_date":"05\/17\/2019 11:53","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"which is a measure of the clock cycles per second","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"284":{"tweet_id":285,"author":"kbou0004","tweet_date":"05\/17\/2019 11:56","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"Cache is a small local copy (within the processor) of recently accessed information from the computer\u2019s memory.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"285":{"tweet_id":286,"author":"kbou0004","tweet_date":"05\/17\/2019 12:46","text":"","topicid":"11_2","location":4,"type":"important","sect_Title":" User Experience    ","comment":"Skeuomorphism is the practice of engineering software to look like a physical device or object.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"286":{"tweet_id":287,"author":"kbou0004","tweet_date":"05\/17\/2019 13:06","text":"","topicid":"11_1","location":1,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"We can add up the value of each digit.  The right-most digit has a value of 20 = 1, the next 21 = 2, the third 22 = 4, etc.  Hence the number above is: (25 + 23 + 21) = (32 + 8 + 2) = 42.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"287":{"tweet_id":288,"author":"kbou0004","tweet_date":"05\/17\/2019 13:07","text":"","topicid":"11_1","location":2,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"he ALU\u2019s circuits comprise of many such logic gates","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"288":{"tweet_id":289,"author":"kbou0004","tweet_date":"05\/17\/2019 13:07","text":"","topicid":"11_1","location":2,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"while NOT only takes in one binary input.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"289":{"tweet_id":290,"author":"kbou0004","tweet_date":"05\/17\/2019 13:17","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"Registers hold data that that is being used by the CPU for operations such as calculations","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"290":{"tweet_id":291,"author":"kbou0004","tweet_date":"05\/17\/2019 13:18","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"This holds a local copy recently accessed data from the computer\u2019s main memory (RAM)","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"291":{"tweet_id":292,"author":"kbou0004","tweet_date":"05\/17\/2019 13:18","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"The processor uses one register to hold the memory location for the current instruction being executed. ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"292":{"tweet_id":293,"author":"kbou0004","tweet_date":"05\/17\/2019 13:19","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"s a computer\u2019s short term but main working memory","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"293":{"tweet_id":294,"author":"kbou0004","tweet_date":"05\/17\/2019 13:20","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"Hard disks are also non-volatile permanent storage.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"294":{"tweet_id":295,"author":"kbou0004","tweet_date":"05\/17\/2019 13:20","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"Flash memory is permanent storage or non-volatile memory, meaning changes to the disk are permanent and are preserved regardless of whether the computer has power.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"295":{"tweet_id":296,"author":"kbou0004","tweet_date":"05\/17\/2019 13:25","text":"","topicid":"11_2","location":1,"type":"important","sect_Title":" User Experience    ","comment":" three main factors.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"296":{"tweet_id":297,"author":"kbou0004","tweet_date":"05\/17\/2019 13:25","text":"","topicid":"11_2","location":1,"type":"important","sect_Title":" User Experience    ","comment":"This means designing apps to make all common operations accessible with\u00a0a minimum number of actions. ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"297":{"tweet_id":298,"author":"wleo0010","tweet_date":"05\/17\/2019 15:56","text":"","topicid":"11_1","location":1,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":" represent negative numbers","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"298":{"tweet_id":299,"author":"wleo0010","tweet_date":"05\/18\/2019 02:12","text":"","topicid":"11_1","location":2,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"Storage and Memory","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"299":{"tweet_id":300,"author":"wleo0010","tweet_date":"05\/18\/2019 02:12","text":"","topicid":"11_1","location":2,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":" executing instructions","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"300":{"tweet_id":301,"author":"wleo0010","tweet_date":"05\/18\/2019 02:12","text":"","topicid":"11_1","location":2,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"Processor","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"301":{"tweet_id":302,"author":"wleo0010","tweet_date":"05\/18\/2019 02:16","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"Central Processing Unit (CPU)","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"302":{"tweet_id":303,"author":"wleo0010","tweet_date":"05\/18\/2019 02:17","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"speed, number of cores and a cache size.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"303":{"tweet_id":304,"author":"wleo0010","tweet_date":"05\/18\/2019 02:20","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"GHz","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"304":{"tweet_id":305,"author":"wleo0010","tweet_date":"05\/18\/2019 03:30","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"determines how many individual instructions can executed per second","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"305":{"tweet_id":306,"author":"wleo0010","tweet_date":"05\/18\/2019 03:41","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"each core can be executing different instructions simultaneously in parallel","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"306":{"tweet_id":307,"author":"wleo0010","tweet_date":"05\/18\/2019 03:41","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"multiple processors","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"307":{"tweet_id":308,"author":"wleo0010","tweet_date":"05\/18\/2019 03:41","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"processors are described as having multiple cores","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"308":{"tweet_id":309,"author":"wleo0010","tweet_date":"05\/18\/2019 03:41","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"Cache is a small local copy (within the processor) of recently accessed information from the computer\u2019s memory.  When doing a task the processor will frequently access the same or nearby information, so it makes sense to keep a local copy.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"309":{"tweet_id":310,"author":"wleo0010","tweet_date":"05\/18\/2019 03:42","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"Multi-core processors allow modern smartphones and computers to do many things simultaneously.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"310":{"tweet_id":311,"author":"wleo0010","tweet_date":"05\/18\/2019 03:48","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"hold data that that is being used by the CPU for operations such as calculations","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"311":{"tweet_id":312,"author":"wleo0010","tweet_date":"05\/18\/2019 03:59","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"holds a local copy recently accessed data from the computer\u2019s main memory (RAM)","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"312":{"tweet_id":313,"author":"wleo0010","tweet_date":"05\/18\/2019 04:11","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"RAM is volatile, meaning it retains information only while powered","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"313":{"tweet_id":314,"author":"wleo0010","tweet_date":"05\/18\/2019 04:12","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"short term","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"314":{"tweet_id":315,"author":"wleo0010","tweet_date":"05\/18\/2019 04:12","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":" main working memory","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"315":{"tweet_id":316,"author":"wleo0010","tweet_date":"05\/18\/2019 04:24","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"non-volatile memory","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"316":{"tweet_id":317,"author":"wleo0010","tweet_date":"05\/18\/2019 04:24","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"Solid State Drives (SSDs)","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"317":{"tweet_id":318,"author":"wleo0010","tweet_date":"05\/18\/2019 04:24","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"permanent storage","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"318":{"tweet_id":319,"author":"wleo0010","tweet_date":"05\/18\/2019 04:25","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"preferable","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"319":{"tweet_id":320,"author":"wleo0010","tweet_date":"05\/18\/2019 04:25","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"uses less power","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"320":{"tweet_id":321,"author":"wleo0010","tweet_date":"05\/18\/2019 04:26","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"faster","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"321":{"tweet_id":322,"author":"wleo0010","tweet_date":"05\/18\/2019 04:26","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"smaller","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"322":{"tweet_id":323,"author":"wleo0010","tweet_date":"05\/18\/2019 04:27","text":"","topicid":"11_1","location":3,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"non-volatile permanent storage.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"323":{"tweet_id":324,"author":"wleo0010","tweet_date":"05\/18\/2019 05:11","text":"","topicid":"11_2","location":1,"type":"important","sect_Title":" User Experience    ","comment":"user interface","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"324":{"tweet_id":325,"author":"wleo0010","tweet_date":"05\/18\/2019 05:31","text":"","topicid":"11_2","location":1,"type":"important","sect_Title":" User Experience    ","comment":"Brief windows of activity","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"325":{"tweet_id":326,"author":"wleo0010","tweet_date":"05\/18\/2019 05:39","text":"","topicid":"11_2","location":1,"type":"important","sect_Title":" User Experience    ","comment":"Design considerations for small screens","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"326":{"tweet_id":327,"author":"wleo0010","tweet_date":"05\/18\/2019 05:40","text":"","topicid":"11_2","location":1,"type":"important","sect_Title":" User Experience    ","comment":"Touch-based input methods","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"327":{"tweet_id":328,"author":"wleo0010","tweet_date":"05\/18\/2019 06:38","text":"","topicid":"11_2","location":2,"type":"important","sect_Title":" User Experience    ","comment":"Relevant elements should be in view","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"328":{"tweet_id":329,"author":"wleo0010","tweet_date":"05\/18\/2019 06:38","text":"","topicid":"11_2","location":2,"type":"important","sect_Title":" User Experience    ","comment":"highlighting of important buttons on a page, or making them larger or more prominent.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"329":{"tweet_id":330,"author":"wleo0010","tweet_date":"05\/18\/2019 06:38","text":"","topicid":"11_2","location":2,"type":"important","sect_Title":" User Experience    ","comment":"should be obvious what they are for","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"330":{"tweet_id":331,"author":"wleo0010","tweet_date":"05\/18\/2019 06:49","text":"","topicid":"11_2","location":2,"type":"important","sect_Title":" User Experience    ","comment":"Affordance:","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"331":{"tweet_id":332,"author":"wleo0010","tweet_date":"05\/18\/2019 06:51","text":"","topicid":"11_2","location":2,"type":"important","sect_Title":" User Experience    ","comment":"Cognitive aids:","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"332":{"tweet_id":333,"author":"wleo0010","tweet_date":"05\/18\/2019 06:51","text":"","topicid":"11_2","location":2,"type":"important","sect_Title":" User Experience    ","comment":"Constraints:","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"333":{"tweet_id":334,"author":"wleo0010","tweet_date":"05\/18\/2019 06:52","text":"","topicid":"11_2","location":2,"type":"important","sect_Title":" User Experience    ","comment":"Transfer effects:","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"334":{"tweet_id":335,"author":"wleo0010","tweet_date":"05\/18\/2019 07:00","text":"","topicid":"11_2","location":3,"type":"important","sect_Title":" User Experience    ","comment":"Strive for consistency.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"335":{"tweet_id":336,"author":"wleo0010","tweet_date":"05\/18\/2019 07:01","text":"","topicid":"11_2","location":3,"type":"important","sect_Title":" User Experience    ","comment":"Cater to universal usability.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"336":{"tweet_id":337,"author":"wleo0010","tweet_date":"05\/18\/2019 07:01","text":"","topicid":"11_2","location":3,"type":"important","sect_Title":" User Experience    ","comment":"Offer informative feedback.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"337":{"tweet_id":338,"author":"wleo0010","tweet_date":"05\/18\/2019 07:03","text":"","topicid":"11_2","location":3,"type":"important","sect_Title":" User Experience    ","comment":"Design dialogs to yield closure.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"338":{"tweet_id":339,"author":"wleo0010","tweet_date":"05\/18\/2019 07:04","text":"","topicid":"11_2","location":3,"type":"important","sect_Title":" User Experience    ","comment":"Prevent errors.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"339":{"tweet_id":340,"author":"wleo0010","tweet_date":"05\/18\/2019 07:04","text":"","topicid":"11_2","location":3,"type":"important","sect_Title":" User Experience    ","comment":"warnings","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"340":{"tweet_id":341,"author":"wleo0010","tweet_date":"05\/18\/2019 07:04","text":"","topicid":"11_2","location":3,"type":"important","sect_Title":" User Experience    ","comment":"\u201csuccess\u201d page ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"341":{"tweet_id":342,"author":"wleo0010","tweet_date":"05\/18\/2019 07:05","text":"","topicid":"11_2","location":3,"type":"important","sect_Title":" User Experience    ","comment":"reduce the consequences of error","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"342":{"tweet_id":343,"author":"wleo0010","tweet_date":"05\/18\/2019 07:05","text":"","topicid":"11_2","location":3,"type":"important","sect_Title":" User Experience    ","comment":"undo operations","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"343":{"tweet_id":344,"author":"wleo0010","tweet_date":"05\/18\/2019 07:05","text":"","topicid":"11_2","location":3,"type":"important","sect_Title":" User Experience    ","comment":"detect and correct errors when they do occur","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"344":{"tweet_id":345,"author":"wleo0010","tweet_date":"05\/18\/2019 07:05","text":"","topicid":"11_2","location":3,"type":"important","sect_Title":" User Experience    ","comment":"Prevent errors before they occur","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"345":{"tweet_id":346,"author":"wleo0010","tweet_date":"05\/18\/2019 07:06","text":"","topicid":"11_2","location":3,"type":"important","sect_Title":" User Experience    ","comment":"Permit easy reversal of actions.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"346":{"tweet_id":347,"author":"wleo0010","tweet_date":"05\/18\/2019 07:07","text":"","topicid":"11_2","location":3,"type":"important","sect_Title":" User Experience    ","comment":" Home screen","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"347":{"tweet_id":348,"author":"wleo0010","tweet_date":"05\/18\/2019 07:07","text":"","topicid":"11_2","location":3,"type":"important","sect_Title":" User Experience    ","comment":"Support internal locus of control.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"348":{"tweet_id":349,"author":"wleo0010","tweet_date":"05\/18\/2019 07:08","text":"","topicid":"11_2","location":3,"type":"important","sect_Title":" User Experience    ","comment":"Reduce short-term memory load.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"349":{"tweet_id":350,"author":"wleo0010","tweet_date":"05\/18\/2019 07:31","text":"","topicid":"11_2","location":4,"type":"important","sect_Title":" User Experience    ","comment":"the practice of engineering software to look like a physical device or object.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"350":{"tweet_id":351,"author":"kbou0004","tweet_date":"05\/22\/2019 04:15","text":"","topicid":"14_22","location":3,"type":"important","sect_Title":" Private: Prac 11 instructions  ","comment":"generates the truth table for OR","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86876\/"},"351":{"tweet_id":352,"author":"kbou0004","tweet_date":"05\/22\/2019 04:15","text":"","topicid":"14_22","location":3,"type":"important","sect_Title":" Private: Prac 11 instructions  ","comment":"the","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86876\/"},"352":{"tweet_id":353,"author":"kbou0004","tweet_date":"05\/22\/2019 04:15","text":"","topicid":"14_22","location":3,"type":"important","sect_Title":" Private: Prac 11 instructions  ","comment":"generates","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86876\/"},"353":{"tweet_id":354,"author":"kbou0004","tweet_date":"05\/22\/2019 04:15","text":"","topicid":"14_22","location":3,"type":"important","sect_Title":" Private: Prac 11 instructions  ","comment":"truth table for AND","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86876\/"},"354":{"tweet_id":355,"author":"kbou0004","tweet_date":"05\/22\/2019 04:49","text":"","topicid":"14_22","location":4,"type":"confusing","sect_Title":" Private: Prac 11 instructions  ","comment":"\nA + AB = A","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86876\/"},"355":{"tweet_id":356,"author":"wleo0010","tweet_date":"05\/23\/2019 18:04","text":"","topicid":"14_22","location":3,"type":"important","sect_Title":" Private: Prac 11 instructions  ","comment":" AND is usually the multiplication sign (*) or \u2227 or dot (.);","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86876\/"},"356":{"tweet_id":357,"author":"wleo0010","tweet_date":"05\/23\/2019 18:05","text":"","topicid":"14_22","location":3,"type":"important","sect_Title":" Private: Prac 11 instructions  ","comment":" OR is usually the addition sign (+) or \u2228","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86876\/"},"357":{"tweet_id":358,"author":"wleo0010","tweet_date":"05\/23\/2019 18:05","text":"","topicid":"14_22","location":3,"type":"important","sect_Title":" Private: Prac 11 instructions  ","comment":"NOT is usually the apostrophe (\u2018) or \u00ac ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86876\/"},"358":{"tweet_id":359,"author":"wleo0010","tweet_date":"05\/25\/2019 13:44","text":"","topicid":"12_1","location":1,"type":"important","sect_Title":" Security and Privacy   ","comment":"hash","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43992\/"},"359":{"tweet_id":360,"author":"wleo0010","tweet_date":"05\/25\/2019 13:44","text":"","topicid":"12_1","location":1,"type":"important","sect_Title":" Security and Privacy   ","comment":"one-way function","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43992\/"},"360":{"tweet_id":361,"author":"wleo0010","tweet_date":"05\/25\/2019 13:45","text":"","topicid":"12_1","location":1,"type":"important","sect_Title":" Security and Privacy   ","comment":"impossible to compute the original password from the hash","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43992\/"},"361":{"tweet_id":362,"author":"wleo0010","tweet_date":"05\/25\/2019 13:54","text":"","topicid":"12_1","location":2,"type":"important","sect_Title":" Security and Privacy   ","comment":"tables containing precomputed hashes for common dictionary words","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43992\/"},"362":{"tweet_id":363,"author":"wleo0010","tweet_date":"05\/25\/2019 13:56","text":"","topicid":"12_1","location":2,"type":"important","sect_Title":" Security and Privacy   ","comment":"technique that can be used with password hashes to make the use of rainbow tables infeasible","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43992\/"},"363":{"tweet_id":364,"author":"wleo0010","tweet_date":"05\/25\/2019 13:56","text":"","topicid":"12_1","location":2,"type":"important","sect_Title":" Security and Privacy   ","comment":"salt ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43992\/"},"364":{"tweet_id":365,"author":"wleo0010","tweet_date":"05\/25\/2019 13:56","text":"","topicid":"12_1","location":2,"type":"important","sect_Title":" Security and Privacy   ","comment":"Salting","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43992\/"},"365":{"tweet_id":366,"author":"wleo0010","tweet_date":"05\/25\/2019 13:57","text":"","topicid":"12_1","location":2,"type":"important","sect_Title":" Security and Privacy   ","comment":"random string","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43992\/"},"366":{"tweet_id":367,"author":"wleo0010","tweet_date":"05\/25\/2019 13:59","text":"","topicid":"12_1","location":2,"type":"important","sect_Title":" Security and Privacy   ","comment":"Use of a salt","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43992\/"},"367":{"tweet_id":368,"author":"wleo0010","tweet_date":"05\/25\/2019 14:00","text":"","topicid":"12_1","location":2,"type":"important","sect_Title":" Security and Privacy   ","comment":"making the password much longer","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43992\/"},"368":{"tweet_id":369,"author":"wleo0010","tweet_date":"05\/25\/2019 14:01","text":"","topicid":"12_1","location":2,"type":"important","sect_Title":" Security and Privacy   ","comment":" salt-specific rainbow table","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43992\/"},"369":{"tweet_id":370,"author":"wleo0010","tweet_date":"05\/25\/2019 14:28","text":"","topicid":"12_1","location":3,"type":"important","sect_Title":" Security and Privacy   ","comment":"secret","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43992\/"},"370":{"tweet_id":371,"author":"wleo0010","tweet_date":"05\/25\/2019 14:28","text":"","topicid":"12_1","location":3,"type":"important","sect_Title":" Security and Privacy   ","comment":"something possessed by the user","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43992\/"},"371":{"tweet_id":372,"author":"wleo0010","tweet_date":"05\/25\/2019 17:38","text":"","topicid":"12_1","location":4,"type":"important","sect_Title":" Security and Privacy   ","comment":"operating system limits what applications can access and these apps need to request specific access to sensors and services","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43992\/"},"372":{"tweet_id":373,"author":"wleo0010","tweet_date":"05\/25\/2019 17:38","text":"","topicid":"12_1","location":4,"type":"important","sect_Title":" Security and Privacy   ","comment":"sandboxing","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43992\/"},"373":{"tweet_id":374,"author":"wleo0010","tweet_date":"05\/26\/2019 03:39","text":"","topicid":"12_1","location":3,"type":"important","sect_Title":" Security and Privacy   ","comment":" one-time password ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43992\/"},"374":{"tweet_id":375,"author":"wleo0010","tweet_date":"05\/26\/2019 03:40","text":"","topicid":"12_1","location":3,"type":"important","sect_Title":" Security and Privacy   ","comment":" popular encryption techniques","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43992\/"},"375":{"tweet_id":376,"author":"wleo0010","tweet_date":"05\/26\/2019 03:41","text":"","topicid":"12_1","location":3,"type":"important","sect_Title":" Security and Privacy   ","comment":"number theory","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43992\/"},"376":{"tweet_id":377,"author":"wleo0010","tweet_date":"05\/26\/2019 03:41","text":"","topicid":"12_1","location":3,"type":"important","sect_Title":" Security and Privacy   ","comment":"mathematical properties of prime numbers","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43992\/"},"377":{"tweet_id":378,"author":"wleo0010","tweet_date":"05\/26\/2019 03:42","text":"","topicid":"12_1","location":4,"type":"important","sect_Title":" Security and Privacy   ","comment":"Without the use of HTTPS and encrypted communications, anyone can read any of your internet traffic","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43992\/"},"378":{"tweet_id":379,"author":"wleo0010","tweet_date":"05\/27\/2019 16:50","text":"","topicid":"14_24","location":2,"type":"important","sect_Title":" Private: Prac 12 instructions  ","comment":"create an account with a username of your choice and a password consisting of one word from the English dictionary.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86879\/"},"379":{"tweet_id":380,"author":"wleo0010","tweet_date":"05\/27\/2019 16:51","text":"","topicid":"14_24","location":2,"type":"important","sect_Title":" Private: Prac 12 instructions  ","comment":"add code to the checkPassword function to confirm that the password given by the user matches what\u2019s in Local Storage for that username.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86879\/"},"380":{"tweet_id":381,"author":"wleo0010","tweet_date":"05\/27\/2019 16:52","text":"","topicid":"14_24","location":2,"type":"important","sect_Title":" Private: Prac 12 instructions  ","comment":" ensure that if the stored password matches the entered password then a popup occurs ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86879\/"},"381":{"tweet_id":382,"author":"wleo0010","tweet_date":"05\/27\/2019 16:52","text":"","topicid":"14_24","location":2,"type":"important","sect_Title":" Private: Prac 12 instructions  ","comment":"alert function","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86879\/"},"382":{"tweet_id":383,"author":"wleo0010","tweet_date":"05\/27\/2019 16:52","text":"","topicid":"14_24","location":2,"type":"important","sect_Title":" Private: Prac 12 instructions  ","comment":"saying \u201cwelcome [username]\u201d","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86879\/"},"383":{"tweet_id":384,"author":"wleo0010","tweet_date":"05\/27\/2019 22:46","text":"","topicid":"14_24","location":2,"type":"important","sect_Title":" Private: Prac 12 instructions  ","comment":"modify both the checkPassword function","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86879\/"},"384":{"tweet_id":385,"author":"wleo0010","tweet_date":"05\/27\/2019 22:46","text":"","topicid":"14_24","location":2,"type":"important","sect_Title":" Private: Prac 12 instructions  ","comment":"signup functions to use the MD5 code.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86879\/"},"385":{"tweet_id":386,"author":"wleo0010","tweet_date":"05\/27\/2019 23:13","text":"","topicid":"14_24","location":3,"type":"important","sect_Title":" Private: Prac 12 instructions  ","comment":"Create a second account","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86879\/"},"386":{"tweet_id":387,"author":"wleo0010","tweet_date":"05\/27\/2019 23:14","text":"","topicid":"14_24","location":3,"type":"important","sect_Title":" Private: Prac 12 instructions  ","comment":"password is not a dictionary word","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86879\/"},"387":{"tweet_id":388,"author":"wleo0010","tweet_date":"05\/27\/2019 23:14","text":"","topicid":"14_24","location":3,"type":"important","sect_Title":" Private: Prac 12 instructions  ","comment":"3 character password","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86879\/"},"388":{"tweet_id":389,"author":"wleo0010","tweet_date":"05\/27\/2019 23:16","text":"","topicid":"14_24","location":3,"type":"important","sect_Title":" Private: Prac 12 instructions  ","comment":"Confirm that such a password can be obtained from the hashed version using a rainbow table.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86879\/"},"389":{"tweet_id":390,"author":"wleo0010","tweet_date":"05\/27\/2019 23:19","text":"","topicid":"14_24","location":3,"type":"important","sect_Title":" Private: Prac 12 instructions  ","comment":"Modify your code further to \u201csalt\u201d the password before it is hashed for storage or comparison","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86879\/"},"390":{"tweet_id":391,"author":"kbou0004","tweet_date":"05\/28\/2019 12:58","text":"","topicid":"5_1","location":1,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"hich are objects that have the same set of methods and properties (although different values for those properties)","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"391":{"tweet_id":392,"author":"kbou0004","tweet_date":"05\/29\/2019 06:51","text":"","topicid":"14_24","location":2,"type":"confusing","sect_Title":" Private: Prac 12 instructions  ","comment":"password","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86879\/"},"392":{"tweet_id":393,"author":"mgoy0001","tweet_date":"06\/03\/2019 03:40","text":"","topicid":"1_2","location":1,"type":"important","sect_Title":" Web application components   ","comment":"in-memory representation of the page, known as a Document Object Model (DOM)","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86842\/"},"393":{"tweet_id":394,"author":"wleo0010","tweet_date":"06\/03\/2019 15:33","text":"","topicid":"11_1","location":1,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":" word is the standard size that a processor uses for data storage","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"394":{"tweet_id":395,"author":"wleo0010","tweet_date":"06\/04\/2019 07:21","text":"","topicid":"11_2","location":1,"type":"important","sect_Title":" User Experience    ","comment":"gestures","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"395":{"tweet_id":396,"author":"wleo0010","tweet_date":"06\/04\/2019 07:21","text":"","topicid":"11_2","location":1,"type":"important","sect_Title":" User Experience    ","comment":"are not easily discoverable by the user","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"396":{"tweet_id":397,"author":"wleo0010","tweet_date":"06\/04\/2019 07:52","text":"","topicid":"11_2","location":2,"type":"important","sect_Title":" User Experience    ","comment":"appearance of an object should indicate how it should be used","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"397":{"tweet_id":398,"author":"wleo0010","tweet_date":"06\/04\/2019 07:53","text":"","topicid":"11_2","location":2,"type":"important","sect_Title":" User Experience    ","comment":"he user intuitively knows that it can be toggled between states as per the real world.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"398":{"tweet_id":399,"author":"wleo0010","tweet_date":"06\/04\/2019 12:47","text":"","topicid":"10_1","location":2,"type":"important","sect_Title":" Algorithms and Efficiency   ","comment":" dependent on the size of the input that the code is run on","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86914\/"},"399":{"tweet_id":400,"author":"wleo0010","tweet_date":"06\/04\/2019 12:47","text":"","topicid":"10_1","location":2,"type":"important","sect_Title":" Algorithms and Efficiency   ","comment":"Complexity","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86914\/"},"400":{"tweet_id":401,"author":"wleo0010","tweet_date":"06\/04\/2019 12:48","text":"","topicid":"10_1","location":2,"type":"important","sect_Title":" Algorithms and Efficiency   ","comment":"input size n","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86914\/"},"401":{"tweet_id":402,"author":"wleo0010","tweet_date":"06\/04\/2019 12:48","text":"","topicid":"10_1","location":2,"type":"important","sect_Title":" Algorithms and Efficiency   ","comment":"dependent on the size of the input that the code is run on","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86914\/"},"402":{"tweet_id":403,"author":"wleo0010","tweet_date":"06\/04\/2019 15:35","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"Black box testing involves testing code while knowing what it is supposed to do, but not how it does it.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"403":{"tweet_id":404,"author":"wleo0010","tweet_date":"06\/04\/2019 16:10","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":"tests are written knowing how the code being tested works","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"404":{"tweet_id":405,"author":"wleo0010","tweet_date":"06\/05\/2019 17:46","text":"","topicid":"8_1","location":2,"type":"important","sect_Title":" Requirements Analysis    ","comment":"Agile methodologies","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86894\/"},"405":{"tweet_id":406,"author":"mgoy0001","tweet_date":"06\/06\/2019 07:08","text":"","topicid":"7_1","location":2,"type":"important","sect_Title":" Storing data persistently   ","comment":"The benefit with this approach is that the user\u2019s data can be available and subsequently modified from multiple devices and computers. The downside is that cloud storage requires a web connection most of the time.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86792\/"},"406":{"tweet_id":407,"author":"hgoh0004","tweet_date":"06\/07\/2019 09:00","text":"","topicid":"3_1","location":1,"type":"important","sect_Title":" Working with mobile web apps ","comment":"How do mobile web apps differ from so called \u201cnative apps\u201d on Android","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/37253\/"},"407":{"tweet_id":408,"author":"hgoh0004","tweet_date":"06\/07\/2019 09:00","text":"","topicid":"3_1","location":1,"type":"important","sect_Title":" Working with mobile web apps ","comment":"ith native","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/37253\/"},"408":{"tweet_id":409,"author":"hgoh0004","tweet_date":"06\/07\/2019 09:00","text":"","topicid":"3_1","location":1,"type":"important","sect_Title":" Working with mobile web apps ","comment":"ith native","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/37253\/"},"409":{"tweet_id":410,"author":"hgoh0004","tweet_date":"06\/07\/2019 09:02","text":"","topicid":"3_1","location":1,"type":"important","sect_Title":" Working with mobile web apps ","comment":"How do mobile web apps differ from so called \u201cnative apps\u201d on Android","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/37253\/"},"410":{"tweet_id":411,"author":"hgoh0004","tweet_date":"06\/07\/2019 09:02","text":"","topicid":"3_1","location":1,"type":"important","sect_Title":" Working with mobile web apps ","comment":"How do mobile web apps differ from so called \u201cnative apps\u201d on Android","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/37253\/"},"411":{"tweet_id":412,"author":"hgoh0004","tweet_date":"06\/08\/2019 02:29","text":"","topicid":"4_1","location":1,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"the code that performs the task needs to be repeated in each of these places","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"412":{"tweet_id":413,"author":"hgoh0004","tweet_date":"06\/08\/2019 02:29","text":"","topicid":"4_1","location":1,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"If a task has to be performed multiple times at different locations in code","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"413":{"tweet_id":414,"author":"mgoy0001","tweet_date":"06\/08\/2019 04:26","text":"","topicid":"8_1","location":1,"type":"important","sect_Title":" Requirements Analysis    ","comment":"Traditionally (such as in Waterfall methodology), requirements were collected at the project\u2019s outset and committed to before design began. However, the danger with this is that requirements could have been misunderstood at the inception of the project, or could change during the time it takes to develop the software. Hence there is some argument for developing requirements gradually as is done in Agile software development. This works because as the project progresses, both software engineers and clients gain a better understanding of the project. As a result, clients may better understand what is possible, or become better at articulating it.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86894\/"},"414":{"tweet_id":415,"author":"hgoh0004","tweet_date":"06\/08\/2019 05:51","text":"","topicid":"5_1","location":1,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"Classes are recipes for creating objects containing data items","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"415":{"tweet_id":416,"author":"hgoh0004","tweet_date":"06\/08\/2019 05:51","text":"","topicid":"5_1","location":1,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"functions that operate on this data","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"416":{"tweet_id":417,"author":"hgoh0004","tweet_date":"06\/08\/2019 05:52","text":"","topicid":"5_1","location":1,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"This recipe is used to create instances of a class which are objects that have the same set of methods and properties","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"417":{"tweet_id":418,"author":"hgoh0004","tweet_date":"06\/08\/2019 05:53","text":"","topicid":"5_1","location":1,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"attributes are considered private and are accessed via public methods of the class","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"418":{"tweet_id":419,"author":"hgoh0004","tweet_date":"06\/08\/2019 05:58","text":"","topicid":"5_1","location":1,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"classes are self-contained","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"419":{"tweet_id":420,"author":"hgoh0004","tweet_date":"06\/08\/2019 06:16","text":"","topicid":"5_1","location":2,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"Attributes: private instance variables (e.g., this._balance)\nAccessors (getters): public methods (e.g., get balance()) that get the value of private attributes\nMutators (setters): public methods (e.g., set balance(newBalance)) that set the value of private attributes in a controlled way","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"420":{"tweet_id":421,"author":"wleo0010","tweet_date":"06\/09\/2019 06:01","text":"","topicid":"5_1","location":1,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"instantiation","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"421":{"tweet_id":422,"author":"wleo0010","tweet_date":"06\/09\/2019 06:04","text":"","topicid":"5_1","location":1,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":" class declaration","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"422":{"tweet_id":423,"author":"wleo0010","tweet_date":"06\/09\/2019 06:04","text":"","topicid":"5_1","location":1,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"declare classes","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"423":{"tweet_id":424,"author":"wleo0010","tweet_date":"06\/09\/2019 06:04","text":"","topicid":"5_1","location":1,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"constructor","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"424":{"tweet_id":425,"author":"wleo0010","tweet_date":"06\/09\/2019 06:04","text":"","topicid":"5_1","location":1,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"must contain a special method named constructor","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"425":{"tweet_id":426,"author":"wleo0010","tweet_date":"06\/09\/2019 06:04","text":"","topicid":"5_1","location":1,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"initialises the private attributes of the class instance.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"426":{"tweet_id":427,"author":"wleo0010","tweet_date":"06\/09\/2019 06:04","text":"","topicid":"5_1","location":1,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"class","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"427":{"tweet_id":428,"author":"wleo0010","tweet_date":"06\/09\/2019 06:19","text":"","topicid":"5_1","location":3,"type":"important","sect_Title":" JavaScript 5:00 Object Orientation  ","comment":"accessors with the get ke","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86789\/"},"428":{"tweet_id":429,"author":"wleo0010","tweet_date":"06\/09\/2019 07:03","text":"","topicid":"4_1","location":2,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"passed non-objects (aNumber)","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"429":{"tweet_id":430,"author":"wleo0010","tweet_date":"06\/09\/2019 07:03","text":"","topicid":"4_1","location":2,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"passed objects (remember arrays are specialised objects)","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"430":{"tweet_id":431,"author":"wleo0010","tweet_date":"06\/09\/2019 07:53","text":"","topicid":"4_1","location":4,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"acquiring data from a device\u2019s sensors","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"431":{"tweet_id":432,"author":"wleo0010","tweet_date":"06\/09\/2019 07:58","text":"","topicid":"4_1","location":3,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"nested functions","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"432":{"tweet_id":433,"author":"wleo0010","tweet_date":"06\/09\/2019 07:58","text":"","topicid":"4_1","location":3,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"Variables and functions declared outside of any functions are said to be in the global scope","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"433":{"tweet_id":434,"author":"wleo0010","tweet_date":"06\/09\/2019 07:58","text":"","topicid":"4_1","location":3,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"can be accessed\/called by any code in or linked to the current web page","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"434":{"tweet_id":435,"author":"wleo0010","tweet_date":"06\/09\/2019 07:59","text":"","topicid":"4_1","location":3,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":" to make many objects with exactly the same set of properties (not property values)","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"435":{"tweet_id":436,"author":"wleo0010","tweet_date":"06\/09\/2019 08:00","text":"","topicid":"4_1","location":3,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":" with the new operator which\u00a0creates a new object","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"436":{"tweet_id":437,"author":"wleo0010","tweet_date":"06\/09\/2019 08:00","text":"","topicid":"4_1","location":3,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"We make constructor function names begin with an upper case letter to remind us they must be used with new","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"437":{"tweet_id":438,"author":"wleo0010","tweet_date":"06\/09\/2019 08:03","text":"","topicid":"4_1","location":3,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"When there is a local variable in a function with the same name as a global variable, this variable name will refer to the local variable. ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"438":{"tweet_id":439,"author":"wleo0010","tweet_date":"06\/09\/2019 08:03","text":"","topicid":"4_1","location":3,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"x in callMeOften1 and x in callMeOften2 shadow the global x","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"439":{"tweet_id":440,"author":"wleo0010","tweet_date":"06\/09\/2019 08:04","text":"","topicid":"4_1","location":3,"type":"important","sect_Title":" JavaScript 4:00 Functions   ","comment":"From the output of the first statement of callMeOften2 it is clear that local variables are accessible everywhere in the block but their value will be undefined until the point of initialisation.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86786\/"},"440":{"tweet_id":441,"author":"mgoy0001","tweet_date":"06\/09\/2019 10:32","text":"","topicid":"11_1","location":2,"type":"important","sect_Title":" Mobile Hardware Architecture   ","comment":"bitwise operators should be used for numbers to set or check particular bits, e.g., a & 1 could be used to test if the first bit of variable a was set to 1.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86920\/"},"441":{"tweet_id":442,"author":"kteh0006","tweet_date":"06\/10\/2019 07:48","text":"","topicid":"2_2","location":1,"type":"important","sect_Title":" JavaScript 2:00 Data Types and Operations","comment":"+ myStrin","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/88560\/"},"442":{"tweet_id":443,"author":"jqua0005","tweet_date":"06\/11\/2019 08:20","text":"","topicid":"7_2","location":3,"type":"important","sect_Title":" Intro to Software Engineering Processes ","comment":"becoming overly ambitious","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86888\/"},"443":{"tweet_id":444,"author":"kliu0020","tweet_date":"06\/11\/2019 10:23","text":"","topicid":"11_2","location":4,"type":"important","sect_Title":" User Experience    ","comment":"skeuomorphism ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86923\/"},"444":{"tweet_id":445,"author":"jqua0005","tweet_date":"06\/11\/2019 11:41","text":"","topicid":"8_1","location":3,"type":"important","sect_Title":" Requirements Analysis    ","comment":"allowing prioritisation of user stories and associated developer tasks, and assignment of tasks to individual developers.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86894\/"},"445":{"tweet_id":446,"author":"kteh0006","tweet_date":"06\/12\/2019 06:28","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"software components","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"446":{"tweet_id":447,"author":"kteh0006","tweet_date":"06\/12\/2019 06:28","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"testing code","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"447":{"tweet_id":448,"author":"kteh0006","tweet_date":"06\/12\/2019 06:28","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"defects","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"448":{"tweet_id":449,"author":"kteh0006","tweet_date":"06\/12\/2019 06:28","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"Software verification","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"449":{"tweet_id":450,"author":"kteh0006","tweet_date":"06\/12\/2019 06:28","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":" find errors","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"450":{"tweet_id":451,"author":"kteh0006","tweet_date":"06\/12\/2019 06:29","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"interacting components ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"451":{"tweet_id":452,"author":"kteh0006","tweet_date":"06\/12\/2019 06:29","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":" complex systems","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"452":{"tweet_id":453,"author":"kteh0006","tweet_date":"06\/12\/2019 06:29","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"messages","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"453":{"tweet_id":454,"author":"kteh0006","tweet_date":"06\/12\/2019 06:29","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"information between each other","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"454":{"tweet_id":455,"author":"kteh0006","tweet_date":"06\/12\/2019 06:30","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":" add new features","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"455":{"tweet_id":456,"author":"kteh0006","tweet_date":"06\/12\/2019 06:30","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"make modifications to existing (working) code","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"456":{"tweet_id":457,"author":"kteh0006","tweet_date":"06\/12\/2019 06:30","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":" introduction of new bugs.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"457":{"tweet_id":458,"author":"kteh0006","tweet_date":"06\/12\/2019 06:31","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":" small bugs in software components can manifest as subtle problems in other parts of the software","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"458":{"tweet_id":459,"author":"kteh0006","tweet_date":"06\/12\/2019 06:31","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"Static testing","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"459":{"tweet_id":460,"author":"kteh0006","tweet_date":"06\/12\/2019 06:31","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"test the code or application without running it ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"460":{"tweet_id":461,"author":"kteh0006","tweet_date":"06\/12\/2019 06:31","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"can be difficult to track down and to correct.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"461":{"tweet_id":462,"author":"kteh0006","tweet_date":"06\/12\/2019 06:31","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"static testing","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"462":{"tweet_id":463,"author":"kteh0006","tweet_date":"06\/12\/2019 06:31","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"Code review: ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"463":{"tweet_id":464,"author":"kteh0006","tweet_date":"06\/12\/2019 06:31","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"looking through code by eye and searching for problems.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"464":{"tweet_id":465,"author":"kteh0006","tweet_date":"06\/12\/2019 06:31","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"Walkthroughs","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"465":{"tweet_id":466,"author":"kteh0006","tweet_date":"06\/12\/2019 06:32","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":" running code ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"466":{"tweet_id":467,"author":"kteh0006","tweet_date":"06\/12\/2019 06:32","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"checking","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"467":{"tweet_id":468,"author":"kteh0006","tweet_date":"06\/12\/2019 06:32","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"following a process and looking for problem cases","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"468":{"tweet_id":469,"author":"kteh0006","tweet_date":"06\/12\/2019 06:32","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"specific input ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"469":{"tweet_id":470,"author":"kteh0006","tweet_date":"06\/12\/2019 06:32","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"calling individual functions ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"470":{"tweet_id":471,"author":"kteh0006","tweet_date":"06\/12\/2019 06:32","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"dynamic testing.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"471":{"tweet_id":472,"author":"kteh0006","tweet_date":"06\/12\/2019 06:32","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"return values","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"472":{"tweet_id":473,"author":"kteh0006","tweet_date":"06\/12\/2019 06:36","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":" software tests, ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"473":{"tweet_id":474,"author":"kteh0006","tweet_date":"06\/12\/2019 06:37","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"but not how","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"474":{"tweet_id":475,"author":"kteh0006","tweet_date":"06\/12\/2019 06:37","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"it does it","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"475":{"tweet_id":476,"author":"kteh0006","tweet_date":"06\/12\/2019 06:37","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"Black box testing involves testing code while knowing what it is supposed to do,","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"476":{"tweet_id":477,"author":"kteh0006","tweet_date":"06\/12\/2019 06:38","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":" software testing has the concept of oracles","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"477":{"tweet_id":478,"author":"kteh0006","tweet_date":"06\/12\/2019 06:38","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":" right behaviour of the software should be in","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"478":{"tweet_id":479,"author":"kteh0006","tweet_date":"06\/12\/2019 06:38","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"a particular situatio","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"479":{"tweet_id":480,"author":"kteh0006","tweet_date":"06\/12\/2019 06:39","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"each requirement","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"480":{"tweet_id":481,"author":"kteh0006","tweet_date":"06\/12\/2019 06:39","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"software specification determined during requirements analysis","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"481":{"tweet_id":482,"author":"kteh0006","tweet_date":"06\/12\/2019 06:39","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"consult an oracle","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"482":{"tweet_id":483,"author":"kteh0006","tweet_date":"06\/12\/2019 06:39","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":" considers the software component","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"483":{"tweet_id":484,"author":"kteh0006","tweet_date":"06\/12\/2019 06:39","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"without seeing source code ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"484":{"tweet_id":485,"author":"kteh0006","tweet_date":"06\/12\/2019 06:39","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"being tested as a black box","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"485":{"tweet_id":486,"author":"kteh0006","tweet_date":"06\/12\/2019 06:39","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":" determine the correct behaviour.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"486":{"tweet_id":487,"author":"kteh0006","tweet_date":"06\/12\/2019 06:40","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":" giving the black box a set of input and verifying that it produces a particular set of output.\n","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"487":{"tweet_id":488,"author":"kteh0006","tweet_date":"06\/12\/2019 07:01","text":"","topicid":"9_1","location":1,"type":"important","sect_Title":" Software Verification    ","comment":"tests are created directly from software requirements.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"488":{"tweet_id":489,"author":"kteh0006","tweet_date":"06\/12\/2019 07:10","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":"White box testing","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"489":{"tweet_id":490,"author":"kteh0006","tweet_date":"06\/12\/2019 07:10","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":"clear box testin","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"490":{"tweet_id":491,"author":"kteh0006","tweet_date":"06\/12\/2019 07:10","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":"tests are written knowing how the code being tested works","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"491":{"tweet_id":492,"author":"kteh0006","tweet_date":"06\/12\/2019 07:11","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":"individual code paths, ranges of variables or data types used","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"492":{"tweet_id":493,"author":"kteh0006","tweet_date":"06\/12\/2019 07:11","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":"code-based approach","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"493":{"tweet_id":494,"author":"kteh0006","tweet_date":"06\/12\/2019 07:15","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":"units, of code","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"494":{"tweet_id":495,"author":"kteh0006","tweet_date":"06\/12\/2019 07:15","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":" small portions","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"495":{"tweet_id":496,"author":"kteh0006","tweet_date":"06\/12\/2019 07:15","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":"tests are usually written ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"496":{"tweet_id":497,"author":"kteh0006","tweet_date":"06\/12\/2019 07:15","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":"Unit testing","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"497":{"tweet_id":498,"author":"kteh0006","tweet_date":"06\/12\/2019 07:15","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":" tests a function,","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"498":{"tweet_id":499,"author":"kteh0006","tweet_date":"06\/12\/2019 07:15","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":"a method of a class in the case of object-oriented code.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"499":{"tweet_id":500,"author":"kteh0006","tweet_date":"06\/12\/2019 07:16","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":"while they are implementing that portion of the code.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"500":{"tweet_id":501,"author":"kteh0006","tweet_date":"06\/12\/2019 07:17","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":" examine the behaviour and communication between two or more components of a system","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"501":{"tweet_id":502,"author":"kteh0006","tweet_date":"06\/12\/2019 07:17","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":" well defined interfaces, ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"502":{"tweet_id":503,"author":"kteh0006","tweet_date":"06\/12\/2019 07:18","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":" checks the behaviour of components against the documentation.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"503":{"tweet_id":504,"author":"kteh0006","tweet_date":"06\/12\/2019 07:18","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":"integration tests ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"504":{"tweet_id":505,"author":"kteh0006","tweet_date":"06\/12\/2019 07:18","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":" test this code by creating code that returns sample data in the same format as the Twitter web service.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"505":{"tweet_id":506,"author":"kteh0006","tweet_date":"06\/12\/2019 07:18","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":" after successful unit testing","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"506":{"tweet_id":507,"author":"kteh0006","tweet_date":"06\/12\/2019 07:20","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":" testing the complete application in order to check that it satisfies its requirements","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"507":{"tweet_id":508,"author":"kteh0006","tweet_date":"06\/12\/2019 07:21","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":" created from user stories,","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"508":{"tweet_id":509,"author":"kteh0006","tweet_date":"06\/12\/2019 07:21","text":"","topicid":"9_1","location":2,"type":"important","sect_Title":" Software Verification    ","comment":" activity diagrams created during design.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"509":{"tweet_id":510,"author":"kteh0006","tweet_date":"06\/12\/2019 07:22","text":"","topicid":"9_1","location":4,"type":"important","sect_Title":" Software Verification    ","comment":"running a special tool","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"510":{"tweet_id":511,"author":"kteh0006","tweet_date":"06\/12\/2019 07:22","text":"","topicid":"9_1","location":4,"type":"important","sect_Title":" Software Verification    ","comment":"executes your application many time","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"511":{"tweet_id":512,"author":"kteh0006","tweet_date":"06\/12\/2019 07:22","text":"","topicid":"9_1","location":4,"type":"important","sect_Title":" Software Verification    ","comment":" re-running all existing tests written","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"512":{"tweet_id":513,"author":"kteh0006","tweet_date":"06\/12\/2019 07:22","text":"","topicid":"9_1","location":4,"type":"important","sect_Title":" Software Verification    ","comment":" the new feature, or change to the code doesn\u2019t introduce a new bug.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"513":{"tweet_id":514,"author":"kteh0006","tweet_date":"06\/12\/2019 07:23","text":"","topicid":"9_1","location":4,"type":"important","sect_Title":" Software Verification    ","comment":"ideally using all your available test cases.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"514":{"tweet_id":515,"author":"kteh0006","tweet_date":"06\/12\/2019 07:23","text":"","topicid":"9_1","location":4,"type":"important","sect_Title":" Software Verification    ","comment":"coverage tool will output an annotated version of your application\u2019s source code with an execution count next to each line.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"515":{"tweet_id":516,"author":"kteh0006","tweet_date":"06\/12\/2019 07:23","text":"","topicid":"9_1","location":4,"type":"important","sect_Title":" Software Verification    ","comment":" strive for our test cases to have 100% coverage of the code","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"516":{"tweet_id":517,"author":"kteh0006","tweet_date":"06\/12\/2019 07:25","text":"","topicid":"9_1","location":4,"type":"important","sect_Title":" Software Verification    ","comment":" automatic analysis of the code","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"517":{"tweet_id":518,"author":"kteh0006","tweet_date":"06\/12\/2019 07:25","text":"","topicid":"9_1","location":4,"type":"important","sect_Title":" Software Verification    ","comment":"running it) to determine possible issues","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/43990\/"},"518":{"tweet_id":519,"author":"kteh0006","tweet_date":"06\/12\/2019 07:29","text":"","topicid":"9_2","location":1,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"IP is the \u201cpostal service\u201d of the Internet.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"519":{"tweet_id":520,"author":"kteh0006","tweet_date":"06\/12\/2019 07:29","text":"","topicid":"9_2","location":1,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"responsible for the delivery of messages between devices. ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"520":{"tweet_id":521,"author":"kteh0006","tweet_date":"06\/12\/2019 07:29","text":"","topicid":"9_2","location":1,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"Internet Protocol (IP)","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"521":{"tweet_id":522,"author":"kteh0006","tweet_date":"06\/12\/2019 07:30","text":"","topicid":"9_2","location":1,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"two IP versions in use on the Internet today, which coexist but vary in the form of the addresses:","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"522":{"tweet_id":523,"author":"kteh0006","tweet_date":"06\/12\/2019 07:30","text":"","topicid":"9_2","location":1,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"IP address","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"523":{"tweet_id":524,"author":"kteh0006","tweet_date":"06\/12\/2019 07:30","text":"","topicid":"9_2","location":1,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"most common protocol ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"524":{"tweet_id":525,"author":"kteh0006","tweet_date":"06\/12\/2019 07:30","text":"","topicid":"9_2","location":1,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"IPv4 addresses consist of 4 bytes worth of information,","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"525":{"tweet_id":526,"author":"kteh0006","tweet_date":"06\/12\/2019 07:31","text":"","topicid":"9_2","location":1,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"eight colon-separated groups of four hexadecimal digits per group","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"526":{"tweet_id":527,"author":"kteh0006","tweet_date":"06\/12\/2019 07:31","text":"","topicid":"9_2","location":1,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"support 7.9\u00d71028 times as many addresses as IPv4!","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"527":{"tweet_id":528,"author":"kteh0006","tweet_date":"06\/12\/2019 07:31","text":"","topicid":"9_2","location":1,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"eading zeroes","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"528":{"tweet_id":529,"author":"kteh0006","tweet_date":"06\/12\/2019 07:31","text":"","topicid":"9_2","location":1,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":" omitted for brevity.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"529":{"tweet_id":530,"author":"kteh0006","tweet_date":"06\/12\/2019 07:31","text":"","topicid":"9_2","location":1,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"successor to IPv4.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"530":{"tweet_id":531,"author":"kteh0006","tweet_date":"06\/12\/2019 07:33","text":"","topicid":"9_2","location":3,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"web requests must be made via a URL","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"531":{"tweet_id":532,"author":"kteh0006","tweet_date":"06\/12\/2019 07:33","text":"","topicid":"9_2","location":3,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"constructing a URL from Javascript","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"532":{"tweet_id":533,"author":"kteh0006","tweet_date":"06\/12\/2019 07:33","text":"","topicid":"9_2","location":3,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":" only certain characters are used,","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"533":{"tweet_id":534,"author":"kteh0006","tweet_date":"06\/12\/2019 07:33","text":"","topicid":"9_2","location":3,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":" some characters have special meanings in a URL","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"534":{"tweet_id":535,"author":"kteh0006","tweet_date":"06\/12\/2019 07:34","text":"","topicid":"9_2","location":3,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"%3A","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"535":{"tweet_id":536,"author":"kteh0006","tweet_date":"06\/12\/2019 07:34","text":"","topicid":"9_2","location":3,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"%20","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"536":{"tweet_id":537,"author":"kteh0006","tweet_date":"06\/12\/2019 07:34","text":"","topicid":"9_2","location":3,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"convert a string into this safe encoding using the built-in JavaScript encodeURIComponent function.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"537":{"tweet_id":538,"author":"kteh0006","tweet_date":"06\/12\/2019 07:34","text":"","topicid":"9_2","location":3,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":" encoding replaces the problem characters with escape sequences","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"538":{"tweet_id":539,"author":"kteh0006","tweet_date":"06\/12\/2019 07:35","text":"","topicid":"9_2","location":4,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"serialise a JavaScript object to JSON a","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"539":{"tweet_id":540,"author":"kteh0006","tweet_date":"06\/12\/2019 07:35","text":"","topicid":"9_2","location":3,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"pecial meaning in URLs","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"540":{"tweet_id":541,"author":"kteh0006","tweet_date":"06\/12\/2019 07:35","text":"","topicid":"9_2","location":3,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":" colons and forward slashe","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"541":{"tweet_id":542,"author":"kteh0006","tweet_date":"06\/12\/2019 07:35","text":"","topicid":"9_2","location":3,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"%2F","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"542":{"tweet_id":543,"author":"kteh0006","tweet_date":"06\/12\/2019 07:35","text":"","topicid":"9_2","location":4,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":" encode this to be passed in a URL","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"543":{"tweet_id":544,"author":"kteh0006","tweet_date":"06\/12\/2019 07:40","text":"","topicid":"9_2","location":2,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"stood for Asynchronous JavaScript and XML","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"544":{"tweet_id":545,"author":"kteh0006","tweet_date":"06\/12\/2019 07:40","text":"","topicid":"9_2","location":2,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"page without affecting the display of the current page is\u00a0known as Ajax","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"545":{"tweet_id":546,"author":"kteh0006","tweet_date":"06\/12\/2019 07:40","text":"","topicid":"9_2","location":2,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":" move to a different view or request some data from a remote server this would be done by visiting a new web page","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"546":{"tweet_id":547,"author":"kteh0006","tweet_date":"06\/12\/2019 07:41","text":"","topicid":"9_2","location":2,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":" some input (encoded in the URL) and returns some output (the page content).","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"547":{"tweet_id":548,"author":"kteh0006","tweet_date":"06\/12\/2019 07:41","text":"","topicid":"9_2","location":2,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"web service that acts as a remote key-value store","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"548":{"tweet_id":549,"author":"kteh0006","tweet_date":"06\/12\/2019 07:41","text":"","topicid":"9_2","location":2,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"Local Storage.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"549":{"tweet_id":550,"author":"kteh0006","tweet_date":"06\/12\/2019 07:41","text":"","topicid":"9_2","location":2,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":" storage web service can be called with the following URL","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"550":{"tweet_id":551,"author":"kteh0006","tweet_date":"06\/12\/2019 07:41","text":"","topicid":"9_2","location":2,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"broad range of technologies that enable asynchronous communication with remote servers to enable dynamic content changes to web pages","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"551":{"tweet_id":552,"author":"kteh0006","tweet_date":"06\/12\/2019 07:41","text":"","topicid":"9_2","location":2,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"SON has mostly replaced the XML data format in Ajax due to its ease of use from JavaScript.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"552":{"tweet_id":553,"author":"kteh0006","tweet_date":"06\/12\/2019 07:41","text":"","topicid":"9_2","location":2,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":" web page contacted via a URL","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"553":{"tweet_id":554,"author":"kteh0006","tweet_date":"06\/12\/2019 07:42","text":"","topicid":"9_2","location":2,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":" string or JSON object\/array for the value property.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"554":{"tweet_id":555,"author":"kteh0006","tweet_date":"06\/12\/2019 07:42","text":"","topicid":"9_2","location":2,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"given key isn\u2019t found in the database on the server then the value property will be null","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"555":{"tweet_id":556,"author":"kteh0006","tweet_date":"06\/12\/2019 07:42","text":"","topicid":"9_2","location":2,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"request to the web service returns a JSON object with a key and value properties","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"556":{"tweet_id":557,"author":"kteh0006","tweet_date":"06\/12\/2019 07:42","text":"","topicid":"9_2","location":2,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"a query string.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"557":{"tweet_id":558,"author":"kteh0006","tweet_date":"06\/12\/2019 07:42","text":"","topicid":"9_2","location":2,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"single field called key with the value \"name\"","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"558":{"tweet_id":559,"author":"kteh0006","tweet_date":"06\/12\/2019 07:42","text":"","topicid":"9_2","location":2,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"same way we use parameters to pass information to functions in JavaScript","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"559":{"tweet_id":560,"author":"kteh0006","tweet_date":"06\/12\/2019 07:42","text":"","topicid":"9_2","location":2,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"specifying information we want to pass to the web server","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"560":{"tweet_id":561,"author":"kteh0006","tweet_date":"06\/12\/2019 07:43","text":"","topicid":"9_2","location":3,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"convenient method for making AJAX requests ","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"561":{"tweet_id":562,"author":"kteh0006","tweet_date":"06\/12\/2019 07:43","text":"","topicid":"9_2","location":2,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":" store new or update existing values","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"562":{"tweet_id":563,"author":"kteh0006","tweet_date":"06\/12\/2019 07:43","text":"","topicid":"9_2","location":3,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"eturn results in JSON format padded with a callback function","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"563":{"tweet_id":564,"author":"kteh0006","tweet_date":"06\/12\/2019 07:43","text":"","topicid":"9_2","location":3,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"retrieving results in JSON forma","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"564":{"tweet_id":565,"author":"kteh0006","tweet_date":"06\/12\/2019 07:43","text":"","topicid":"9_2","location":3,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":"SON with Padding (JSONP)","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"565":{"tweet_id":566,"author":"kteh0006","tweet_date":"06\/12\/2019 07:44","text":"","topicid":"9_2","location":3,"type":"important","sect_Title":" Internet Architecture and Web Services ","comment":" content of this URL in the background. The URL content returned will be JavaScript code which will then be executed because it is in a script element. Execution of this code will result in a call to nameResult with the output from the request. The script tag specified in HTML would look like this","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/93473\/"},"566":{"tweet_id":567,"author":"mgoy0001","tweet_date":"06\/12\/2019 14:14","text":"","topicid":"8_1","location":2,"type":"important","sect_Title":" Requirements Analysis    ","comment":"  If they are able to do this estimation fairly consistently then they make get a good idea of how many points work of stories they can complete in a normal week, which helps in future planning.","target_uri":"https:\/\/www.alexandriarepository.org\/syllabus\/eng1003\/86894\/"}}

//} End

 				;
readTweetJSON(annotation_data);
}				